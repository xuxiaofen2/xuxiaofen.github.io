<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python实现滑块验证</title>
    <url>/2020/04/07/selenium/</url>
    <content><![CDATA[<p>python中安装好selenium包  pip install selenium<br>点击下载chrome的webdriver： <a href="http://chromedriver.storage.googleapis.com/index.html，目前只有32位的。" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html，目前只有32位的。</a><br>1.驱动下载完成，解压<br>2.将解压后文件chromedriver.exe复制到python的Scripts安装目录下（我的：E:\Python\Python36-32\Scripts），并且添加到path环境变量<br>3.将目录chrome的安装目录添加到path环境变量。（我的：C:\Program Files (x86)\Google\Chrome\Application\chrome.exe）<br>4.运行下面代码：成功打开百度即为成功：（别拉到cmd里直接运行，各种报错，我是在VS终端下调试成功的）<br>    from selenium import webdriver<br>    driver = webdriver.Chrome()<br>　　driver.get(‘<a href="http://www.baidu.com&#39;" target="_blank" rel="noopener">http://www.baidu.com&#39;</a>)</p>
<p>然后是详细代码：(代码转自奥哥)</p>
<h1 id="seleclass-py主入口文件"><a href="#seleclass-py主入口文件" class="headerlink" title="seleclass.py主入口文件"></a>seleclass.py主入口文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> image_diff <span class="keyword">import</span> Diff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeleClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, username, password)</span>:</span></span><br><span class="line">        self.url = url</span><br><span class="line">        self.wdc_option = webdriver.ChromeOptions()</span><br><span class="line">        self.wdc_option.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">        self.wdc_option.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">        self.wdc = webdriver.Chrome(options=self.wdc_option)</span><br><span class="line">        self.wdc.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">        self.wdc.get(self.url)</span><br><span class="line">        self.wdc.maximize_window()</span><br><span class="line">        self.input(username, password)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">input</span><span class="params">(self, username, password)</span>:</span></span><br><span class="line">        self.wdc.find_element_by_id(<span class="string">'login-username'</span>).send_keys(username)</span><br><span class="line">        self.wdc.find_element_by_id(<span class="string">'login-passwd'</span>).send_keys(password)</span><br><span class="line">        self.mouseLogin()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseLogin</span><span class="params">(self)</span>:</span></span><br><span class="line">        ActionChains(self.wdc).move_to_element(self.wdc.find_elements_by_class_name(<span class="string">'btn-login'</span>)[<span class="number">0</span>]).perform()</span><br><span class="line">        ActionChains(self.wdc).click().perform()</span><br><span class="line">        self.mouseMove(Diff(**self.getBase64Data()).hOption())</span><br><span class="line">        self.isLogin()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doScript</span><span class="params">(self, script)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> len(self.wdc.execute_script(script)) &lt; <span class="number">3000</span>:</span><br><span class="line">                    print(<span class="string">'错误数据大小：%s'</span> % len(self.wdc.execute_script(script)), end=<span class="string">'\t'</span>)</span><br><span class="line">                    <span class="keyword">raise</span> BaseException()</span><br><span class="line">                <span class="keyword">return</span> self.wdc.execute_script(script)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">raise</span> BaseException(<span class="string">'拉取数据超时'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mouseMove</span><span class="params">(self, long)</span>:</span></span><br><span class="line">        print(<span class="string">'鼠标移动位移为：%s'</span> % long)</span><br><span class="line">        ActionChains(self.wdc).click_and_hold(</span><br><span class="line">            self.wdc.find_elements_by_class_name(<span class="string">'geetest_slider_button'</span>)[<span class="number">0</span>]).perform()</span><br><span class="line">        ActionChains(self.wdc).move_by_offset(long, <span class="number">0</span>).perform()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        ActionChains(self.wdc).release().perform()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getBase64Data</span><span class="params">(self)</span>:</span></span><br><span class="line">        bg = self.doScript(<span class="string">"return $('.geetest_canvas_bg')[0].toDataURL('image/png')"</span>)[<span class="number">22</span>::]</span><br><span class="line">        full = self.doScript(<span class="string">"return $('.geetest_canvas_fullbg')[0].toDataURL('image/png')"</span>)[<span class="number">22</span>::]</span><br><span class="line">        slice = self.doScript(<span class="string">"return $('.geetest_canvas_slice')[0].toDataURL('image/png')"</span>)[<span class="number">22</span>::]</span><br><span class="line">        print(<span class="string">'真实数据大小：'</span>, len(bg), len(full), len(slice))</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'b1'</span>: bg,</span><br><span class="line">            <span class="string">'b2'</span>: full,</span><br><span class="line">            <span class="string">'b3'</span>: slice</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isLogin</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> self.wdc.get_cookie(<span class="string">'DedeUserID'</span>):</span><br><span class="line">                self.wdc.get(<span class="string">'https://space.bilibili.com/'</span> + self.wdc.get_cookie(<span class="string">'DedeUserID'</span>)[<span class="string">'value'</span>])</span><br><span class="line">                print(<span class="string">'登陆成功：%s'</span> % self.wdc.find_element_by_id(<span class="string">'h-name'</span>).text)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">raise</span> BaseException(<span class="string">'页面跳转超时'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        self.wdc.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = SeleClass(<span class="string">'https://passport.bilibili.com/login'</span>, <span class="string">'username'</span>, <span class="string">'password'</span>)</span><br></pre></td></tr></table></figure>
<h1 id="image-diff-py图片处理文件"><a href="#image-diff-py图片处理文件" class="headerlink" title="image_diff.py图片处理文件"></a>image_diff.py图片处理文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> skimage.measure <span class="keyword">import</span> compare_ssim</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> imutils</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Diff</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, b1, b2, b3)</span>:</span></span><br><span class="line">        self.imageA = cv2.imdecode(np.frombuffer(b64decode(b1), np.uint8), cv2.COLOR_RGB2BGR)</span><br><span class="line">        self.imageB = cv2.imdecode(np.frombuffer(b64decode(b2), np.uint8), cv2.COLOR_RGB2BGR)</span><br><span class="line">        self.imageC = cv2.imdecode(np.frombuffer(b64decode(b3), np.uint8), cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        cv2.imshow(<span class="string">'imga'</span>, self.imageA)</span><br><span class="line">        cv2.imshow(<span class="string">'imgb'</span>, self.imageB)</span><br><span class="line">        cv2.imshow(<span class="string">'imgc'</span>, self.imageC)</span><br><span class="line">        <span class="keyword">if</span> chr(cv2.waitKey(<span class="number">0</span>)) == <span class="string">'q'</span>:</span><br><span class="line">            cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hOption</span><span class="params">(self)</span>:</span></span><br><span class="line">        grayA = cv2.cvtColor(self.imageA, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        grayB = cv2.cvtColor(self.imageB, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        grayC = cv2.cvtColor(self.imageC, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        npArr_3 = np.array(grayC)</span><br><span class="line">        <span class="keyword">return</span> self.diff(grayA, grayB, npArr_3)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diff</span><span class="params">(self, grayA, grayB, npArr_3)</span>:</span></span><br><span class="line">        (score, diff) = compare_ssim(grayA, grayB, full=<span class="literal">True</span>)</span><br><span class="line">        diff = (diff * <span class="number">255</span>).astype(<span class="string">"uint8"</span>)</span><br><span class="line">        print(<span class="string">'图片相似度为：%s'</span> % score)</span><br><span class="line">        <span class="keyword">return</span> self.tf(diff, npArr_3)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tf</span><span class="params">(self, diff, npArr_3)</span>:</span></span><br><span class="line">        thresh = cv2.threshold(diff, <span class="number">0</span>, <span class="number">255</span>,</span><br><span class="line">                               cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[<span class="number">1</span>]</span><br><span class="line">        cnts = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,</span><br><span class="line">                                cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">        cnts = cnts[<span class="number">1</span>] <span class="keyword">if</span> imutils.is_cv3() <span class="keyword">else</span> cnts[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        img3_t = cv2.threshold(npArr_3, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        cnts_3 = cv2.findContours(img3_t.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">        cnts_3 = cnts_3[<span class="number">1</span>] <span class="keyword">if</span> imutils.is_cv3() <span class="keyword">else</span> cnts_3[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> self.getBr(cnts, cnts_3)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getBr</span><span class="params">(self, cnts, cnts_3)</span>:</span></span><br><span class="line">        x1, y1, w1, h1 = cv2.boundingRect(cnts[<span class="number">-1</span>])</span><br><span class="line">        cv2.rectangle(self.imageA, (x1, y1), (x1 + w1, y1 + h1), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.rectangle(self.imageB, (x1, y1), (x1 + w1, y1 + h1), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        x2, y2, w2, h2 = cv2.boundingRect(cnts_3[<span class="number">-1</span>])</span><br><span class="line">        cv2.rectangle(self.imageC, (x2, y2), (x2 + w2, y2 + h2), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        cv2.rectangle(self.imageC, (x2, y2), (x2 + w2, y2 + h2), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x1 - x2</span><br></pre></td></tr></table></figure>
<p><img src="/images/weiyi.jpg" alt=""></p>
<p><img src="/images/weiyi2.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>人工智能,验证</tag>
      </tags>
  </entry>
  <entry>
    <title>5分钟带你Vuex入门</title>
    <url>/2020/03/15/vuex/</url>
    <content><![CDATA[<p>如果你之前使用过 vue.js，你一定知道在 vue 中各个组件之间传值的痛苦，在 vue 中我们可以使用 vuex 来保存我们需要管理的状态值，值一旦被修改，所有引用该值的地方就会自动更新，那么接下来我们就来学习一下 vuex 是如何修改状态值的：</p>
<p>我们新建一个 vue 项目（这里由于我们是讲解 vuex，所以对于 vue 项目的创建我们不会讲解太详细）；在命令行输入 vue init webpack web（使用 webpack 创建一个项目名为 web 的项目）；</p>
<p>项目创建后，然后安装 vuex，使用命令：npm install vuex –save（安装 vuex 保存到本地），安装成功后你会看到这个界面：<br><img src="/images/v1.jpg" alt=""></p>
<p>然后我们执行 npm run dev 启动项目，在浏览器输入：”localhost:8080”；正常的话然后我们会看到项目的启动页，<br><img src="/images/v2.jpg" alt=""></p>
<p>看到这个界面说明项目启动成功，然后我们在项目的 src 目录下新建一个目录 store，在该目录下新建一个 index.js 文件，我们用来创建 vuex 实例，然后在该文件中引入 vue 和 vuex，创建 Vuex.Store 实例保存到变量 store 中，最后使用 export default 导出 store：</p>
<p><img src="/images/v3.jpg" alt=""></p>
<p>然后我们在 main.js 文件中引入该文件，在文件里面添加 import store from ‘./store’;，再在 vue 实例全局引入 store 对象；<br><img src="/images/v4.jpg" alt=""></p>
<p>然后我们就可以开始编写我们的 vuex 业务代码了，那么，我们的数据如何保存？</p>
<h2 id="State："><a href="#State：" class="headerlink" title="State："></a>State：</h2><p>vuex 中的数据源，我们需要保存的数据就保存在这里，可以在页面通过 this.$store.state 来获取我们定义的数据；</p>
<p><img src="/images/v5.jpg" alt=""></p>
<p><img src="/images/v6.jpg" alt=""></p>
<p>这时候我们页面上就得到了这个 count 值 1：</p>
<p><img src="/images/v21.jpg" alt=""></p>
<h2 id="Getters："><a href="#Getters：" class="headerlink" title="Getters："></a>Getters：</h2><p>Getter 相当于 vue 中的 computed 计算属性，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算，这里我们可以通过定义 vuex 的 Getter 来获取，Getters 可以用于监听、state 中的值的变化，返回计算后的结果，这里我们修改 Hello World.vue 文件如下：</p>
<p><img src="/images/v7.jpg" alt=""></p>
<p>再修改 index.js 文件如下，其中 getters 中的 getStateCount 方法接收一个参数 state，这个参数就是我们用来保存数据的那个对象；</p>
<p><img src="/images/v8.jpg" alt=""></p>
<p>然后我们在页面显示：</p>
<p><img src="/images/v9.jpg" alt=""></p>
<h2 id="Mutations："><a href="#Mutations：" class="headerlink" title="Mutations："></a>Mutations：</h2><p>数据我们在页面是获取到了，但是如果我们需要修改 count 值怎么办？如果需要修改 store 中的值唯一的方法就是提交 mutation 来修改，我们现在 Hello World.vue 文件中添加两个按钮，一个加 1，一个减 1；这里我们点击按钮调用 addFun（执行加的方法）和 reductionFun（执行减法的方法），然后在里面直接提交 mutations 中的方法修改值：</p>
<p><img src="/images/v10.jpg" alt=""></p>
<p>修改 index.js 文件，添加 mutations，在 mutations 中定义两个函数，用来对 count 加 1 和减 1，这里定义的两个方法就是上面 commit 提交的两个方法如下：</p>
<p><img src="/images/v11.jpg" alt=""></p>
<p>页面上点击+、- 按钮操作数据：</p>
<p>点击 “+”按钮</p>
<p><img src="/images/v12.jpg" alt=""></p>
<p>执行成功，我们再连续点击三次减 “-” 按钮</p>
<p><img src="/images/v13.jpg" alt=""></p>
<p>ok！完美。</p>
<h2 id="Actions："><a href="#Actions：" class="headerlink" title="Actions："></a>Actions：</h2><p>我们看到，当点击三次后值从 2 变成了-1；页面上的值是改变了；我们达到了修改 store 中状态值的目的，但是，官方并不介意我们这样直接去修改 store 里面的值，而是让我们去提交一个 actions，在 actions 中提交 mutation 再去修改状态值，接下来我们修改 index.js 文件，先定义 actions 提交 mutation 的函数：</p>
<p><img src="/images/v14.jpg" alt=""></p>
<p>然后我们去修改 Hello World.vue 文件：</p>
<p><img src="/images/v15.jpg" alt=""></p>
<p>这里我们把 commit 提交 mutations 修改为使用 dispatch 来提交 actions；我们点击页面，效果是一样的。</p>
<p><img src="/images/v16.jpg" alt=""></p>
<p>好了，我们这里已经实现了一个基本的 vuex 修改状态值的完整流程，如果我们需要指定加减的数值，那么我们直接传入 dispatch 中的第二个参数，然后在 actions 中的对应函数中接受参数在传递给 mutations 中的函数进行计算：</p>
<p><img src="/images/v17.jpg" alt=""></p>
<p><img src="/images/v18.jpg" alt=""></p>
<p>这个时候我们再去点击“ - ”按钮就会发现不再是减 1 了，而是减去 10 了。</p>
<h2 id="mapState、mapGetters、mapActions"><a href="#mapState、mapGetters、mapActions" class="headerlink" title="mapState、mapGetters、mapActions"></a>mapState、mapGetters、mapActions</h2><p>如果我们不喜欢这种在页面上使用“this.$stroe.state.count”和“this.$store.dispatch(‘funName’)”这种很长的写法，那么我们可以使用 mapState、mapGetters、mapActions 就不会这么麻烦了；</p>
<p>我们修改 Hello World.vue 文件如下：</p>
<p><img src="/images/v19.jpg" alt=""></p>
<p>此时我们在页面使用 count1 调用：</p>
<p><img src="/images/v20.jpg" alt=""></p>
<p>正常显示，效果是一样的，我们就可以不再使用很长的写法来调用了。</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack入门教程</title>
    <url>/2020/02/29/webpack/</url>
    <content><![CDATA[<h3 id="什么是WebPack，为什么要使用它？"><a href="#什么是WebPack，为什么要使用它？" class="headerlink" title="什么是WebPack，为什么要使用它？"></a>什么是WebPack，为什么要使用它？</h3><h4 id="为什要使用WebPack"><a href="#为什要使用WebPack" class="headerlink" title="为什要使用WebPack"></a>为什要使用WebPack</h4><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法</p>
<ul>
<li>模块化，让我们可以把复杂的程序细化为小的文件;</li>
<li>类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；</li>
<li>Scss，less等CSS预处理器</li>
<li>…</li>
</ul>
<p>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为WebPack类的工具的出现提供了需求。</p>
<h4 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h4><p>WebPack可以看做是<strong>模块打包机</strong>：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。</p>
<h4 id="WebPack和Grunt以及Gulp相比有什么特性"><a href="#WebPack和Grunt以及Gulp相比有什么特性" class="headerlink" title="WebPack和Grunt以及Gulp相比有什么特性"></a>WebPack和Grunt以及Gulp相比有什么特性</h4><p>其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。</p>
<p>Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。<br><span class="img-wrap"><img src="/images/grunt.png" alt="Grunt和Gulp的工作流程" title="Grunt和Gulp的工作流程"></span></p>
<p>Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。<br><span class="img-wrap"><img src="/images/webpack.png" alt="Webpack工作方式" title="Webpack工作方式"></span></p>
<p>如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。</p>
<h3 id="开始使用Webpack"><a href="#开始使用Webpack" class="headerlink" title="开始使用Webpack"></a>开始使用Webpack</h3><p>初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample project），在终端中转到该文件夹后执行下述指令就可以完成安装。</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局安装</span></span><br><span class="line">npm install -g webpack</span><br><span class="line"><span class="comment">//安装到你的项目目录</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack</span><br></pre></td></tr></table></figure>

<h4 id="正式使用Webpack前的准备"><a href="#正式使用Webpack前的准备" class="headerlink" title="正式使用Webpack前的准备"></a>正式使用Webpack前的准备</h4><ol>
<li><p>在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个package.json文件</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> init</span><br></pre></td></tr></table></figure>

<p>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</p>
</li>
<li><p>package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装Webpack</span></span><br><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack</span><br></pre></td></tr></table></figure>
</li>
<li><p>回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个<code>index.html</code>文件）。接下来我们再创建三个文件:</p>
</li>
</ol>
<ul>
<li><p><code>index.html</code> –放在public文件夹中;</p>
</li>
<li><p><code>Greeter.js</code>– 放在app文件夹中;</p>
</li>
<li><p><code>main.js</code>– 放在app文件夹中;</p>
<p>此时项目结构如下图所示<br><span class="img-wrap"><img src="/images/xmjg.png" alt="项目结构" title="项目结构"></span></p>
<p>我们在<strong>index.html</strong>文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为<code>bundle.js</code>，之后我们还会详细讲述）。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们在<code>Greeter.js</code>中定义一个返回包含问候信息的<code>html</code>元素的函数,并依据CommonJS规范导出这个函数为一个模块：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Greeter.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  greet.textContent = <span class="string">"Hi there and greetings!"</span>;</span><br><span class="line">  <span class="keyword">return</span> greet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>main.js</code>文件中我们写入下述代码，用以把<code>Greeter模块</code>返回的节点插入页面。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js </span></span><br><span class="line">const greeter = require('./<span class="module-access"><span class="module"><span class="identifier">Greeter</span>.</span></span>js');</span><br><span class="line">document.query<span class="constructor">Selector(<span class="string">"#root"</span>)</span>.append<span class="constructor">Child(<span class="params">greeter</span>()</span>);</span><br></pre></td></tr></table></figure>

<h4 id="正式使用Webpack"><a href="#正式使用Webpack" class="headerlink" title="正式使用Webpack"></a>正式使用Webpack</h4><p>webpack可以在终端中使用，在基本的使用方法如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#123;extry file&#125;出填写入口文件的路径，本文中就是上述main.js的路径，</span></span><br><span class="line"><span class="comment"># &#123;destination for bundled file&#125;处填写打包文件的存放路径</span></span><br><span class="line"><span class="comment"># 填写路径的时候不用添加&#123;&#125;</span></span><br><span class="line"><span class="section">webpack</span> &#123;<span class="attribute">entry</span> file&#125; &#123;<span class="attribute">destination</span> for bundled file&#125;</span><br></pre></td></tr></table></figure>

<p>指定入口文件后，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack不是全局安装的，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中输入如下命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># webpack非全局安装的情况</span></span><br><span class="line">node_modules<span class="regexp">/.bin/</span>webpack app<span class="regexp">/main.js public/</span>bundle.js</span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<p><span class="img-wrap"><img src="/images/symlh.png" alt="使用命令行打包" title="使用命令行打包"></span></p>
<p>可以看出<code>webpack</code>同时编译了<code>main.js</code> 和<code>Greeter,js</code>,现在打开<code>index.html</code>,可以看到如下结果<br><span class="img-wrap"><img src="/images/htmlresult.png" alt="htmlResult1" title="htmlResult1"></span></p>
<p>有没有很激动，已经成功的使用<code>Webpack</code>打包了一个文件了。不过在终端中进行复杂的操作，其实是不太方便且容易出错的，接下来看看Webpack的另一种更常见的使用方法。</p>
<h4 id="通过配置文件来使用Webpack"><a href="#通过配置文件来使用Webpack" class="headerlink" title="通过配置文件来使用Webpack"></a>通过配置文件来使用<code>Webpack</code></h4><p>Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的<code>loaders</code>和<code>plugins</code>），这些功能其实都可以通过命令行模式实现，但是正如前面提到的，这样不太方便且容易出错的，更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，我们可以把所有的与打包相关的信息放在里面。</p>
<p>继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为<code>webpack.config.js</code>的文件，我们在其中写入如下所示的简单配置代码，目前的配置主要涉及到的内容是入口文件路径和打包后文件的存放路径。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"><span class="symbol">  entry:</span>  __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line"><span class="symbol">  output:</span> &#123;</span><br><span class="line"><span class="symbol">    path:</span> __dirname + <span class="string">"/public"</span>,<span class="comment">//打包后的文件存放的地方</span></span><br><span class="line"><span class="symbol">    filename:</span> <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <strong>注</strong>：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p>
<p>有了这个配置之后，再打包文件，只需在终端里运行<code>webpack(非全局安装需使用node_modules/.bin/webpack)</code>命令就可以了，这条命令会自动引用<code>webpack.config.js</code>文件中的配置选项，示例如下：</p>
<p><span class="img-wrap"><img src="/images/ph.png" alt="配合配置文件进行打包" title="配合配置文件进行打包"></span></p>
<p>又学会了一种使用<code>Webpack</code>的方法，这种方法不用管那烦人的命令行参数，有没有感觉很爽。如果我们可以连<code>webpack(非全局安装需使用node_modules/.bin/webpack)</code>这条命令都可以不用，那种感觉会不会更爽~，继续看下文。</p>
<h4 id="更快捷的执行打包任务"><a href="#更快捷的执行打包任务" class="headerlink" title="更快捷的执行打包任务"></a>更快捷的执行打包任务</h4><p>在命令行中输入命令需要代码类似于<code>node_modules/.bin/webpack</code>这样的路径其实是比较烦人的，不过值得庆幸的是<code>npm</code>可以引导任务执行，对<code>npm</code>进行配置后可以在命令行中使用简单的<code>npm start</code>命令来替代上面略微繁琐的命令。在<code>package.json</code>中对<code>scripts</code>对象进行相关设置即可，设置方法如下。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"webpack-sample-project"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Sample webpack project"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack"</span> <span class="comment">// 修改的是这里，JSON文件不支持注释，引用时请清除</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"zhang"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"3.10.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;`</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注：</strong><code>package.json</code>中的<code>script</code>会安装一定顺序寻找命令对应位置，本地的<code>node_modules/.bin</code>路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p>
</blockquote>
<p>npm的<code>start</code>命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用<code>npm start</code>就可以执行其对于的命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code>，我们在命令行中输入<code>npm start</code>试试，输出结果如下：</p>
<p><span class="img-wrap"><img src="/images/npm.png" alt="使用npm start 打包代码" title="使用npm start 打包代码"></span></p>
<p>现在只需要使用<code>npm start</code>就可以打包文件了，有没有觉得<code>webpack</code>也不过如此嘛，不过不要太小瞧<code>webpack</code>，要充分发挥其强大的功能我们需要修改配置文件的其它选项，一项项来看。</p>
<h3 id="Webpack的强大功能"><a href="#Webpack的强大功能" class="headerlink" title="Webpack的强大功能"></a>Webpack的强大功能</h3><h4 id="生成Source-Maps（使调试更容易）"><a href="#生成Source-Maps（使调试更容易）" class="headerlink" title="生成Source Maps（使调试更容易）"></a>生成Source Maps（使调试更容易）</h4><p>开发总是离不开调试，方便的调试能极大的提高开发效率，不过有时候通过打包后的文件，你是不容易找到出错了的地方，对应的你写的代码的位置的，<code>Source Maps</code>就是来帮我们解决这个问题的。</p>
<p>通过简单的配置，<code>webpack</code>就可以在打包时为我们生成的<code>source maps</code>，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。</p>
<p>在<code>webpack</code>的配置文件中配置<code>source maps</code>，需要配置<code>devtool</code>，它有以下四种不同的配置选项，各具优缺点，描述如下：</p>
<table>
<thead><tr>
<th>devtool选项</th>
<th>配置结果</th>
</tr></thead>
<tbody>
<tr>
<td>`source-map`</td>
<td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的`source map`，但是它会减慢打包速度；</td>
</tr>
<tr>
<td>`cheap-module-source-map`</td>
<td>在一个单独的文件中生成一个不带列映射的`map`，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td>
</tr>
<tr>
<td>`eval-source-map`</td>
<td>使用`eval`打包源文件模块，在同一个文件中生成干净的完整的`source map`。这个选项可以在不影响构建速度的前提下生成完整的`sourcemap`，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；</td>
</tr>
<tr>
<td>`cheap-module-eval-source-map`</td>
<td>这是在打包文件时最快的生成`source map`的方法，生成的`Source Map` 会和打包后的`JavaScript`文件同行显示，没有列映射，和`eval-source-map`选项具有相似的缺点；</td>
</tr>
</tbody>
</table>

<p>正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的打包速度的后果就是对打包后的文件的的执行有一定影响。</p>
<p>对小到中型的项目中，<code>eval-source-map</code>是一个很好的选项，再次强调你只应该开发阶段使用它，我们继续对上文新建的<code>webpack.config.js</code>，进行如下配置:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">  devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">  entry:  __dirname + <span class="string">"/app/main.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">"/public"</span>,</span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <code>cheap-module-eval-source-map</code>方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。</p>
<h4 id="使用webpack构建本地服务器"><a href="#使用webpack构建本地服务器" class="headerlink" title="使用webpack构建本地服务器"></a>使用webpack构建本地服务器</h4><p>想不想让你的浏览器监听你的代码的修改，并自动刷新显示修改后的结果，其实<code>Webpack</code>提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> webpack-<span class="built_in">dev</span>-server</span><br></pre></td></tr></table></figure>

<p>devserver作为webpack配置选项中的一项，以下是它的一些配置选项，更多配置可参考<a href="https://webpack.js.org/configuration/dev-server/" target="_blank" rel="noopener">这里</a></p>
<table>
<thead><tr>
<th>devserver的配置选项</th>
<th>功能描述</th>
</tr></thead>
<tbody>
<tr>
<td>contentBase</td>
<td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public"目录）</td>
</tr>
<tr>
<td>port</td>
<td>设置默认监听端口，如果省略，默认为”8080“</td>
</tr>
<tr>
<td>inline</td>
<td>设置为`true`，当源文件改变时会自动刷新页面</td>
</tr>
<tr>
<td>historyApiFallback</td>
<td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为`true`，所有的跳转将指向index.html</td>
</tr>
</tbody>
</table>

<p>把这些命令加到webpack的配置文件中，现在的配置文件<code>webpack.config.js</code>如下所示</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">devtool:</span> <span class="string">'eval-source-map'</span><span class="string">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">entry:</span>  <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/app/main.js"</span><span class="string">,</span></span><br><span class="line">  <span class="attr">output:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/public"</span><span class="string">,</span></span><br><span class="line">    <span class="attr">filename:</span> <span class="string">"bundle.js"</span></span><br><span class="line">  <span class="string">&#125;,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">devServer:</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">contentBase:</span> <span class="string">"./public"</span><span class="string">,//本地服务器所加载的页面所在的目录</span></span><br><span class="line">    <span class="attr">historyApiFallback:</span> <span class="literal">true</span><span class="string">,//不跳转</span></span><br><span class="line">    <span class="attr">inline:</span> <span class="literal">true</span><span class="string">//实时刷新</span></span><br><span class="line">  <span class="string">&#125;</span> </span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在<code>package.json</code>中的<code>scripts</code>对象中添加如下命令，用以开启本地服务器：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">   <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;amp;&amp;amp; exit 1"</span>,</span><br><span class="line">   <span class="string">"start"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">   <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>在终端中输入<code>npm run server</code>即可在本地的<code>8080</code>端口查看结果</p>
<p><span class="img-wrap"><img src="/images/kqbdfwq.png" alt="开启本地服务器" title="开启本地服务器"></span></p>
<h4 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h4><p><strong>鼎鼎大名的Loaders登场了！</strong></p>
<p><code>Loaders</code>是<code>webpack</code>提供的最激动人心的功能之一了。通过使用不同的<code>loader</code>，<code>webpack</code>有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的Loaders可以把React的中用到的JSX文件转换为JS文件。</p>
<p>Loaders需要单独安装并且需要在<code>webpack.config.js</code>中的<code>modules</code>关键字下进行配置，Loaders的配置包括以下几方面：</p>
</li>
<li><p><code>test</code>：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）</p>
</li>
<li><p><code>loader</code>：loader的名称（必须）</p>
</li>
<li><p><code>include/exclude</code>:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</p>
</li>
<li><p><code>query</code>：为loaders提供额外的设置选项（可选）</p>
<p>不过在配置loader之前，我们把<code>Greeter.js</code>里的问候消息放在一个单独的JSON文件里,并通过合适的配置使<code>Greeter.js</code>可以读取该JSON文件的值，各文件修改后的代码如下：</p>
<p>在app文件夹中创建带有问候信息的JSON文件(命名为<code>config.json</code>)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"greetText"</span>: <span class="string">"Hi there and greetings from JSON!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新后的Greeter.js</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">var<span class="built_in"> config </span>= require(<span class="string">'./config.json'</span>);</span><br><span class="line"></span><br><span class="line">module.exports = function() &#123;</span><br><span class="line">  var greet = document.createElement(<span class="string">'div'</span>);</span><br><span class="line">  greet.textContent = config.greetText;</span><br><span class="line">  return greet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>注</strong> 由于<code>webpack3.*/webpack2.*</code>已经内置可处理JSON文件，这里我们无需再添加<code>webpack1.*</code>需要的<code>json-loader</code>。在看如何具体使用loader之前我们先看看Babel是什么？</p>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的：</p>
</li>
<li><p>让你能使用最新的JavaScript代码（ES6，ES7…），而不用管新标准是否被当前使用的浏览器完全支持；</p>
</li>
<li><p>让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；</p>
<h4 id="Babel的安装与配置"><a href="#Babel的安装与配置" class="headerlink" title="Babel的安装与配置"></a>Babel的安装与配置</h4><p>Babel其实是几个模块化的包，其核心功能位于称为<code>babel-core</code>的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的<code>babel-env-preset</code>包和解析JSX的<code>babel-preset-react</code>包）。</p>
<p>我们先来一次性安装这些依赖包</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">// npm一次性安装多个依赖模块，模块之间用空格隔开</span><br><span class="line"><span class="symbol">npm</span> install --save-dev <span class="keyword">babel-core </span><span class="keyword">babel-loader </span><span class="keyword">babel-preset-env </span><span class="keyword">babel-preset-react</span></span><br></pre></td></tr></table></figure>

<p>在<code>webpack</code>中配置Babel的方法如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">entry:</span> <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/app/main.js"</span><span class="string">,//已多次提及的唯一入口文件</span></span><br><span class="line">    <span class="attr">output:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/public"</span><span class="string">,//打包后的文件存放的地方</span></span><br><span class="line">        <span class="attr">filename:</span> <span class="string">"bundle.js"</span><span class="string">//打包后输出文件的文件名</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">devtool:</span> <span class="string">'eval-source-map'</span><span class="string">,</span></span><br><span class="line">    <span class="attr">devServer:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">contentBase:</span> <span class="string">"./public"</span><span class="string">,//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        <span class="attr">historyApiFallback:</span> <span class="literal">true</span><span class="string">,//不跳转</span></span><br><span class="line">        <span class="attr">inline:</span> <span class="literal">true</span><span class="string">//实时刷新</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">module:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">rules:</span> <span class="string">[</span></span><br><span class="line">            <span class="string">&#123;</span></span><br><span class="line">                <span class="attr">test:</span> <span class="string">/(\.jsx|\.js)$/,</span></span><br><span class="line">                <span class="attr">use:</span> <span class="string">&#123;</span></span><br><span class="line">                    <span class="attr">loader:</span> <span class="string">"babel-loader"</span><span class="string">,</span></span><br><span class="line">                    <span class="attr">options:</span> <span class="string">&#123;</span></span><br><span class="line">                        <span class="attr">presets:</span> <span class="string">[</span></span><br><span class="line">                            <span class="string">"env"</span><span class="string">,</span> <span class="string">"react"</span></span><br><span class="line">                        <span class="string">]</span></span><br><span class="line">                    <span class="string">&#125;</span></span><br><span class="line">                <span class="string">&#125;,</span></span><br><span class="line">                <span class="attr">exclude:</span> <span class="string">/node_modules/</span></span><br><span class="line">            <span class="string">&#125;</span></span><br><span class="line">        <span class="string">]</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure>

<p>现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save react react-dom</span></span><br></pre></td></tr></table></figure>

<p>接下来我们使用ES6的语法，更新<code>Greeter.js</code>并返回一个React组件</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Greeter,js</span></span><br><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123;<span class="type">Component</span>&#125; from <span class="symbol">'reac</span>t'</span><br><span class="line"><span class="keyword">import</span> config from './config.json';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &amp;lt;div&amp;gt;</span><br><span class="line">        &#123;config.greetText&#125;</span><br><span class="line">      &amp;lt;/div&amp;gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="type">Greeter</span></span><br></pre></td></tr></table></figure>

<p>修改<code>main.js</code>如下，使用ES6的模块定义和渲染Greeter模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</span><br><span class="line"></span><br><span class="line">render(&amp;lt;Greeter /&amp;gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure>
<p>重新使用<code>npm start</code>打包，如果之前打开的本地服务器没有关闭，你应该可以在<code>localhost:8080</code>下看到与之前一样的内容，这说明<code>react</code>和<code>es6</code>被正常打包了。</p>
<p><span class="img-wrap"><img src="/images/8080.png" alt="localhost:8080" title="localhost:8080"></span></p>
<h4 id="Babel的配置"><a href="#Babel的配置" class="headerlink" title="Babel的配置"></a>Babel的配置</h4><p>Babel其实可以完全在 <code>webpack.config.js</code> 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的<code>webpack.config.js</code>文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用<code>.babelrc</code>里的babel配置选项），如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">entry:</span> <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/app/main.js"</span><span class="string">,//已多次提及的唯一入口文件</span></span><br><span class="line">    <span class="attr">output:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">__dirname</span> <span class="string">+</span> <span class="string">"/public"</span><span class="string">,//打包后的文件存放的地方</span></span><br><span class="line">        <span class="attr">filename:</span> <span class="string">"bundle.js"</span><span class="string">//打包后输出文件的文件名</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">devtool:</span> <span class="string">'eval-source-map'</span><span class="string">,</span></span><br><span class="line">    <span class="attr">devServer:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">contentBase:</span> <span class="string">"./public"</span><span class="string">,//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        <span class="attr">historyApiFallback:</span> <span class="literal">true</span><span class="string">,//不跳转</span></span><br><span class="line">        <span class="attr">inline:</span> <span class="literal">true</span><span class="string">//实时刷新</span></span><br><span class="line">    <span class="string">&#125;,</span></span><br><span class="line">    <span class="attr">module:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">rules:</span> <span class="string">[</span></span><br><span class="line">            <span class="string">&#123;</span></span><br><span class="line">                <span class="attr">test:</span> <span class="string">/(\.jsx|\.js)$/,</span></span><br><span class="line">                <span class="attr">use:</span> <span class="string">&#123;</span></span><br><span class="line">                    <span class="attr">loader:</span> <span class="string">"babel-loader"</span></span><br><span class="line">                <span class="string">&#125;,</span></span><br><span class="line">                <span class="attr">exclude:</span> <span class="string">/node_modules/</span></span><br><span class="line">            <span class="string">&#125;</span></span><br><span class="line">        <span class="string">]</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"react"</span>, <span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。</p>
<h3 id="一切皆模块"><a href="#一切皆模块" class="headerlink" title="一切皆模块"></a>一切皆模块</h3><p>Webpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。</p>
<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><p>webpack提供两个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>，二者处理的任务不同，<code>css-loader</code>使你能够使用类似<code>@import</code> 和 <code>url(...)</code>的方法实现 <code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p>
<p>继续上面的例子</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">npm install --save-dev style-loader css-loader</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line"><span class="symbol">    module:</span> &#123;</span><br><span class="line"><span class="symbol">        rules:</span> [</span><br><span class="line">            &#123;</span><br><span class="line"><span class="symbol">                test:</span> /(\.jsx|\.js)$/,</span><br><span class="line"><span class="symbol">                use:</span> &#123;</span><br><span class="line"><span class="symbol">                    loader:</span> <span class="string">"babel-loader"</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="symbol">                exclude:</span> /node_modules/</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="symbol">                test:</span> /\.css$/,</span><br><span class="line"><span class="symbol">                use:</span> [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="symbol">                        loader:</span> <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line"><span class="symbol">                        loader:</span> <span class="string">"css-loader"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>请注意这里对同一个文件引入多个loader的方法。</p>
<p>接下来，在app文件夹里创建一个名字为”main.css”的文件，对一些元素设置样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* main.css */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">-ms-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Helvetica Neue'</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们这里例子中用到的<code>webpack</code>只有单一的入口，其它的模块需要通过 <code>import</code>, <code>require</code>, <code>url</code>等与入口文件建立其关联，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Greeter <span class="keyword">from</span> <span class="string">'./Greeter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./main.css'</span>;<span class="comment">//使用require导入css文件</span></span><br><span class="line"></span><br><span class="line">render(&amp;lt;Greeter /&amp;gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。</p>
</blockquote>
<p>上面的代码说明webpack是怎么把css当做模块看待的，咱们继续看一个更加真实的css模块实践。</p>
<h4 id="CSS-module"><a href="#CSS-module" class="headerlink" title="CSS module"></a>CSS module</h4><p>在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，配合优化工具，依赖管理和加载管理可以自动完成。</p>
<p>不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧巨大且充满了全局类名，维护和修改都非常困难。</p>
<p>被称为<code>CSS modules</code>的技术意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack对CSS模块化提供了非常好的支持，只需要在CSS loader中进行简单配置即可，然后就可以直接把CSS的类名传递到组件的代码中，这样做有效避免了全局污染。具体的代码如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">module.exports</span> <span class="string">=</span> <span class="string">&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">module:</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">rules:</span> <span class="string">[</span></span><br><span class="line">            <span class="string">&#123;</span></span><br><span class="line">                <span class="attr">test:</span> <span class="string">/(\.jsx|\.js)$/,</span></span><br><span class="line">                <span class="attr">use:</span> <span class="string">&#123;</span></span><br><span class="line">                    <span class="attr">loader:</span> <span class="string">"babel-loader"</span></span><br><span class="line">                <span class="string">&#125;,</span></span><br><span class="line">                <span class="attr">exclude:</span> <span class="string">/node_modules/</span></span><br><span class="line">            <span class="string">&#125;,</span></span><br><span class="line">            <span class="string">&#123;</span></span><br><span class="line">                <span class="attr">test:</span> <span class="string">/\.css$/,</span></span><br><span class="line">                <span class="attr">use:</span> <span class="string">[</span></span><br><span class="line">                    <span class="string">&#123;</span></span><br><span class="line">                        <span class="attr">loader:</span> <span class="string">"style-loader"</span></span><br><span class="line">                    <span class="string">&#125;,</span> <span class="string">&#123;</span></span><br><span class="line">                        <span class="attr">loader:</span> <span class="string">"css-loader"</span><span class="string">,</span></span><br><span class="line">                        <span class="attr">options:</span> <span class="string">&#123;</span></span><br><span class="line">                            <span class="attr">modules:</span> <span class="literal">true</span><span class="string">,</span> <span class="string">//</span> <span class="string">指定启用css</span> <span class="string">modules</span></span><br><span class="line">                            <span class="attr">localIdentName:</span> <span class="string">'[name]__[local]--[hash:base64:5]'</span> <span class="string">//</span> <span class="string">指定css的类名格式</span></span><br><span class="line">                        <span class="string">&#125;</span></span><br><span class="line">                    <span class="string">&#125;</span></span><br><span class="line">                <span class="string">]</span></span><br><span class="line">            <span class="string">&#125;</span></span><br><span class="line">        <span class="string">]</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure>

<p>我们在app文件夹下创建一个<code>Greeter.css</code>文件来进行一下测试</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Greeter.css */</span></span><br><span class="line"><span class="selector-class">.root</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>导入<code>.root</code>到Greeter.js中</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123;<span class="type">Component</span>&#125; from <span class="symbol">'reac</span>t';</span><br><span class="line"><span class="keyword">import</span> config from './config.json';</span><br><span class="line"><span class="keyword">import</span> styles from './<span class="type">Greeter</span>.css';<span class="comment">//导入</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &amp;lt;div className=&#123;styles.root&#125;&amp;gt; <span class="comment">//使用cssModule添加类名的方法</span></span><br><span class="line">        &#123;config.greetText&#125;</span><br><span class="line">      &amp;lt;/div&amp;gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="type">Greeter</span></span><br></pre></td></tr></table></figure>

<p>放心使用把，相同的类名也不会造成不同组件之间的污染。</p>
<p><span class="img-wrap"><img src="/images/css.png" alt="应用了css module后的样式" title="应用了css module后的样式"></span></p>
<p>CSS modules 也是一个很大的主题，有兴趣的话可以去其<a href="https://github.com/css-modules/css-modules" target="_blank" rel="noopener">官方文档</a>了解更多。</p>
<h4 id="CSS预处理器"><a href="#CSS预处理器" class="headerlink" title="CSS预处理器"></a>CSS预处理器</h4><p><code>Sass</code> 和 <code>Less</code> 之类的预处理器是对原生CSS的拓展，它们允许你使用类似于<code>variables</code>, <code>nesting</code>, <code>mixins</code>, <code>inheritance</code>等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，</p>
<p>你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理<code>loaders</code>:</p>
</li>
<li><p><code>Less Loader</code></p>
</li>
<li><p><code>Sass Loader</code></p>
</li>
<li><p><code>Stylus Loader</code></p>
<p>不过其实也存在一个CSS的处理平台<code>-PostCSS</code>，它可以帮助你的CSS实现更多的功能，在其<a href="https://github.com/postcss/postcss" target="_blank" rel="noopener">官方文档</a>可了解更多相关知识。</p>
<p>举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。</p>
<p>首先安装<code>postcss-loader</code> 和 <code>autoprefixer</code>（自动添加前缀的插件）</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> postcss-loader autoprefixer</span><br></pre></td></tr></table></figure>

<p>接下来，在webpack配置文件中添加<code>postcss-loader</code>，在根目录新建<code>postcss.config.js</code>,并添加如下代码之后，重新使用<code>npm start</code>打包时，你写的css会自动根据Can i use里的数据添加不同前缀了。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="symbol">    module:</span> &#123;</span><br><span class="line"><span class="symbol">        rules:</span> [</span><br><span class="line">            &#123;</span><br><span class="line"><span class="symbol">                test:</span> /(\.jsx|\.js)$/,</span><br><span class="line"><span class="symbol">                use:</span> &#123;</span><br><span class="line"><span class="symbol">                    loader:</span> <span class="string">"babel-loader"</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="symbol">                exclude:</span> /node_modules/</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line"><span class="symbol">                test:</span> /\.css$/,</span><br><span class="line"><span class="symbol">                use:</span> [</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="symbol">                        loader:</span> <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line"><span class="symbol">                        loader:</span> <span class="string">"css-loader"</span>,</span><br><span class="line"><span class="symbol">                        options:</span> &#123;</span><br><span class="line"><span class="symbol">                            modules:</span> true</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line"><span class="symbol">                        loader:</span> <span class="string">"postcss-loader"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        require(<span class="string">'autoprefixer'</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，本文已经谈论了处理JS的Babel和处理CSS的PostCSS的基本用法，它们其实也是两个单独的平台，配合<code>webpack</code>可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-<code>Plugins</code></p>
<h3 id="插件（Plugins）"><a href="#插件（Plugins）" class="headerlink" title="插件（Plugins）"></a>插件（Plugins）</h3><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>
<p>Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p>
<h4 id="使用插件的方法"><a href="#使用插件的方法" class="headerlink" title="使用插件的方法"></a>使用插件的方法</h4><p>要使用某个插件，我们需要通过<code>npm</code>安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续上面的例子，我们添加了一个给打包后代码<a href="https://webpack.js.org/plugins/banner-plugin/" target="_blank" rel="noopener">添加版权声明的插件</a>。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">const</span> <span class="string">webpack = require('webpack');</span></span><br><span class="line"></span><br><span class="line"><span class="meta">module.exports</span> = <span class="string">&#123;</span></span><br><span class="line"><span class="attr">...</span></span><br><span class="line">    <span class="attr">module</span>: <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">rules</span>: <span class="string">[</span></span><br><span class="line">            <span class="attr">&#123;</span></span><br><span class="line">                <span class="attr">test</span>: <span class="string">/(\.jsx|\.js)$/,</span></span><br><span class="line">                <span class="attr">use</span>: <span class="string">&#123;</span></span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">"babel-loader"</span></span><br><span class="line">                <span class="attr">&#125;,</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="string">/node_modules/</span></span><br><span class="line">            <span class="attr">&#125;,</span></span><br><span class="line">            <span class="attr">&#123;</span></span><br><span class="line">                <span class="attr">test</span>: <span class="string">/\.css$/,</span></span><br><span class="line">                <span class="attr">use</span>: <span class="string">[</span></span><br><span class="line">                    <span class="attr">&#123;</span></span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">"style-loader"</span></span><br><span class="line">                    <span class="meta">&#125;,</span> <span class="string">&#123;</span></span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">"css-loader",</span></span><br><span class="line">                        <span class="attr">options</span>: <span class="string">&#123;</span></span><br><span class="line">                            <span class="attr">modules</span>: <span class="string">true</span></span><br><span class="line">                        <span class="attr">&#125;</span></span><br><span class="line">                    <span class="meta">&#125;,</span> <span class="string">&#123;</span></span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">"postcss-loader"</span></span><br><span class="line">                    <span class="attr">&#125;</span></span><br><span class="line">                <span class="attr">]</span></span><br><span class="line">            <span class="attr">&#125;</span></span><br><span class="line">        <span class="attr">]</span></span><br><span class="line">    <span class="attr">&#125;,</span></span><br><span class="line">    <span class="attr">plugins</span>: <span class="string">[</span></span><br><span class="line">        <span class="attr">new</span> <span class="string">webpack.BannerPlugin('版权所有，翻版必究')</span></span><br><span class="line">    <span class="attr">],</span></span><br><span class="line"><span class="attr">&#125;;</span></span><br></pre></td></tr></table></figure>

<p>通过这个插件，打包后的JS文件显示如下</p>
<p><span class="img-wrap"><img src="/images/bqsy.png" alt="版权所有，翻版必究" title="版权所有，翻版必究"></span></p>
<p>这就是webpack插件的基础用法了，下面给大家推荐几个常用的插件</p>
<h4 id="HtmlWebpackPlugin"><a href="#HtmlWebpackPlugin" class="headerlink" title="HtmlWebpackPlugin"></a>HtmlWebpackPlugin</h4><p>这个插件的作用是依据一个简单的<code>index.html</code>模板，生成一个自动引用你打包后的JS文件的新<code>index.html</code>。这在每次生成的js文件名称不同时非常有用（比如添加了<code>hash</code>值）。</p>
<p><strong>安装</strong></p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> html-webpack-plugin</span><br></pre></td></tr></table></figure>

<p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些更改：</p>
</li>
</ul>
<ol>
<li><p>移除public文件夹，利用此插件，<code>index.html</code>文件会自动生成，此外CSS已经通过前面的操作打包到JS中了。</p>
</li>
<li><p>在app目录下，创建一个<code>index.tmpl.html</code>文件模板，这个模板包含<code>title</code>等必须元素，在编译过程中，插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，<code>index.tmpl.html</code>中的模板源代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3.更新<code>webpack</code>的配置文件，方法同上,新建一个<code>build</code>文件夹用来存放最终的输出文件</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./public"</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span><span class="comment">//实时刷新</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            modules: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"postcss-loader"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: __dirname + <span class="string">"/app/index.tmpl.html"</span><span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>再次执行<code>npm start</code>你会发现，build文件夹下面生成了<code>bundle.js</code>和<code>index.html</code>。</p>
<p><span class="img-wrap"><img src="/images/build.png" alt="build文件夹" title="build文件夹"></span></p>
<h4 id="Hot-Module-Replacement"><a href="#Hot-Module-Replacement" class="headerlink" title="Hot Module Replacement"></a>Hot Module Replacement</h4><p><code>Hot Module Replacement</code>（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。</p>
<p>在webpack中实现HMR也很简单，只需要做两项配置</p>
</li>
<li><p>在webpack配置文件中添加HMR插件；</p>
</li>
<li><p>在Webpack Dev Server中添加“hot”参数；</p>
<p>不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。</p>
<p>整理下我们的思路，具体实现方法如下</p>
</li>
</ol>
<ul>
<li><p><code>Babel</code>和<code>webpack</code>是独立的工具</p>
</li>
<li><p>二者可以一起工作</p>
</li>
<li><p>二者都可以通过插件拓展功能</p>
</li>
<li><p>HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；</p>
</li>
<li><p>Babel有一个叫做<code>react-transform-hrm</code>的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；</p>
<p>还是继续上例来实际看看如何配置</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'eval-source-map'</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./public"</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            modules: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"postcss-loader"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: __dirname + <span class="string">"/app/index.tmpl.html"</span><span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()<span class="comment">//热加载插件</span></span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>安装<code>react-transform-hmr</code></p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-dev babel-plugin-react-<span class="built_in">transform</span> react-<span class="built_in">transform</span>-hmr</span><br></pre></td></tr></table></figure>

<p>配置Babel</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"react"</span>, <span class="string">"env"</span>],</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"development"</span>: &#123;</span><br><span class="line">    <span class="attr">"plugins"</span>: [[<span class="string">"react-transform"</span>, &#123;</span><br><span class="line">       <span class="attr">"transforms"</span>: [&#123;</span><br><span class="line">         <span class="attr">"transform"</span>: <span class="string">"react-transform-hmr"</span>,</span><br><span class="line"></span><br><span class="line">         <span class="attr">"imports"</span>: [<span class="string">"react"</span>],</span><br><span class="line"></span><br><span class="line">         <span class="attr">"locals"</span>: [<span class="string">"module"</span>]</span><br><span class="line">       &#125;]</span><br><span class="line">     &#125;]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在当你使用React时，可以热加载模块了,每次保存就能在浏览器上看到更新内容。</p>
<h3 id="产品阶段的构建"><a href="#产品阶段的构建" class="headerlink" title="产品阶段的构建"></a>产品阶段的构建</h3><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。</p>
<p>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个<code>webpack.production.config.js</code>的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.production.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>, <span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'null'</span>, <span class="comment">//注意修改了这里，这能大大压缩我们的打包代码</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./public"</span>, <span class="comment">//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>, <span class="comment">//不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">            test: <span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">"babel-loader"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="string">"css-loader"</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        modules: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    loader: <span class="string">"postcss-loader"</span></span><br><span class="line">                &#125;],</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: __dirname + <span class="string">"/app/index.tmpl.html"</span> <span class="comment">//new 一个这个插件的实例，并传入相关的参数</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin() <span class="comment">//热加载插件</span></span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"</span><span class="keyword">Error</span>: <span class="keyword">no</span> <span class="keyword">test</span> specified\<span class="string">" &amp;amp;&amp;amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack --config ./webpack.production.config.js --progress"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"^15.6.1"</span>,</span><br><span class="line">    <span class="string">"react-dom"</span>: <span class="string">"^15.6.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意:</strong>如果是window电脑，<code>build</code>需要配置为<code>&quot;build&quot;: &quot;set NODE_ENV=production &amp;amp;&amp;amp; webpack --config ./webpack.production.config.js --progress&quot;</code>.谢谢评论区简友提醒。</p>
</blockquote>
<h4 id="优化插件"><a href="#优化插件" class="headerlink" title="优化插件"></a>优化插件</h4><p>webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能</p>
</li>
<li><p><code>OccurenceOrderPlugin</code> :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</p>
</li>
<li><p><code>UglifyJsPlugin</code>：压缩JS代码；</p>
</li>
<li><p><code>ExtractTextPlugin</code>：分离CSS和JS文件</p>
<p>我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装其它非内置插件</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-dev extract-<span class="built_in">text</span>-webpack-plugin</span><br></pre></td></tr></table></figure>

<p>在配置文件的plugins后引用它们</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.production.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'none'</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">"./public"</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/(\.jsx|\.js)$/</span>,</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">"style-loader"</span></span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"css-loader"</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            modules: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, &#123;</span><br><span class="line">                        loader: <span class="string">"postcss-loader"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: __dirname + <span class="string">"/app/index.tmpl.html"</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.OccurrenceOrderPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"style.css"</span>)</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>此时执行<code>npm run build</code>可以看见代码是被压缩后的</p>
<p><span class="img-wrap"><img src="/images/1031000-f9b89ce486539162.png" alt="压缩后的代码" title="压缩后的代码"></span></p>
<h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）</p>
<p>webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">..</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">"/build"</span>,</span><br><span class="line">        filename: <span class="string">"bundle-[hash].js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>现在用户会有合理的缓存了。</p>
<p><span class="img-wrap"><img src="/images/hash.png" alt="带hash值的js名" title="带hash值的js名"></span></p>
<h4 id="去除build文件中的残余文件"><a href="#去除build文件中的残余文件" class="headerlink" title="去除build文件中的残余文件"></a>去除<code>build</code>文件中的残余文件</h4><p>添加了<code>hash</code>之后，会导致改变文件内容后重新打包时，文件名不同而内容越来越多，因此这里介绍另外一个很好用的插件<code>clean-webpack-plugin</code>。</p>
<p><strong>安装</strong>：<br><code>cnpm install clean-webpack-plugin --save-dev</code></p>
<p><strong>使用</strong>：</p>
<p>引入<code>clean-webpack-plugin</code>插件后在配置文件的<code>plugins</code>中做相应配置即可：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line">  plugins: [</span><br><span class="line">    ...<span class="comment">// 这里是之前配置的其它各种插件</span></span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(<span class="string">'build/*.*'</span>, &#123;</span><br><span class="line">      root: __dirname,</span><br><span class="line">      verbose: <span class="literal">true</span>,</span><br><span class="line">      dry: <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure>
<p>关于<code>clean-webpack-plugin</code>的详细使用可参考<a href="https://github.com/johnagan/clean-webpack-plugin" target="_blank" rel="noopener">这里</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>webpack</tag>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue实现新旧版B站轮播图</title>
    <url>/2020/02/15/vuecarousel/</url>
    <content><![CDATA[<p>很喜欢bilibili上的轮播图造型，这次就来自己写一下B站上的轮播图吧。<br>首先，B站分旧版和新版，仔细观察会发现，轮播图用的明显不是一套代码，因为旧版轮播图，播到最后一张时就倒回去了，是的，因为每一张图都有过渡，必须遵循这个规则，而且不可能第一张跑在最后一张的后面，这样用户体验不是很好，但我们还是要来做一下这种轮播图。<br>本次采用Vue框架进行开发，当然原生js和JQuery也可以，但是Vue支持数据双向绑定，响应速度快，简单，更便于维护。</p>
<h3 id="旧版轮播图"><a href="#旧版轮播图" class="headerlink" title="旧版轮播图"></a>旧版轮播图</h3><p>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			* &#123;</span><br><span class="line">				margin: 0;</span><br><span class="line">				padding: 0;</span><br><span class="line">			&#125;</span><br><span class="line">			a&#123;</span><br><span class="line">				text-decoration: none;</span><br><span class="line">			&#125;</span><br><span class="line">			li&#123;</span><br><span class="line">				list-style-type: none;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> &#123;</span></span><br><span class="line">				max-width: 440px;</span><br><span class="line">				height: 220px;</span><br><span class="line">				position: relative;</span><br><span class="line">				overflow: hidden;</span><br><span class="line">				border-radius: 4px;</span><br><span class="line">				float: left;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.pic</span> &#123;</span></span><br><span class="line">				height: 220px;</span><br><span class="line">				transition: 1s ease;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">				width: 440px;</span><br><span class="line">				height: 220px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.pic</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">				float: left;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="comment">/* 标题过渡 */</span></span></span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.title</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">				position: absolute;</span><br><span class="line">				bottom: 10px;</span><br><span class="line">				left: 10px;</span><br><span class="line"><span class="css">				<span class="selector-tag">transition</span>: <span class="selector-class">.5s</span>;			</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">				color: white;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.trig</span> &#123;</span></span><br><span class="line">				position: absolute;</span><br><span class="line">				right: 35px;</span><br><span class="line">				bottom: 10px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.trig</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">				float: left;</span><br><span class="line">				background-image: url(img/icons.png);</span><br><span class="line">				background-position: -855px -790px;</span><br><span class="line">				width: 18px;</span><br><span class="line">				height: 18px;</span><br><span class="line">				margin-left: 5px;</span><br><span class="line">				cursor: pointer;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.trig</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">				background-position: -919px -790px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.on</span> &#123;</span></span><br><span class="line">				background-position: -855px -727px !important;</span><br><span class="line">				width: 18px;</span><br><span class="line">				height: 18px;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.show</span> &#123;</span></span><br><span class="line">				opacity: 1;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.hide</span> &#123;</span></span><br><span class="line">				opacity: 0;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel"</span> @<span class="attr">mouseover</span>=<span class="string">"mouseover"</span> @<span class="attr">mouseout</span>=<span class="string">"mouseout"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pic"</span> <span class="attr">:style</span>=<span class="string">"style"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in pics"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"pics[index].url"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"pics[index].src"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in pics"</span> <span class="attr">:class</span>=<span class="string">"pics[index].on?'show':'hide'"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"pics[index].url"</span>&gt;</span>&#123;&#123;pics[index].title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"trig"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in pics"</span> <span class="attr">:class</span>=<span class="string">"&#123;on:pics[index].on&#125;"</span> @<span class="attr">click</span>=<span class="string">"toggle(index)"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'.carousel'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line">					index: 0,</span><br><span class="line"><span class="actionscript">					time: <span class="string">''</span>,</span></span><br><span class="line">					pics: [&#123;</span><br><span class="line"><span class="actionscript">							url: <span class="string">'#'</span>,</span></span><br><span class="line"><span class="actionscript">							src: <span class="string">'img/1.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'标题1'</span>,</span></span><br><span class="line"><span class="actionscript">							on: <span class="literal">true</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line"><span class="actionscript">							url: <span class="string">'#'</span>,</span></span><br><span class="line"><span class="actionscript">							src: <span class="string">'img/2.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'标题2'</span>,</span></span><br><span class="line"><span class="actionscript">							on: <span class="literal">false</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line"><span class="actionscript">							url: <span class="string">'#'</span>,</span></span><br><span class="line"><span class="actionscript">							src: <span class="string">'img/3.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'标题3'</span>,</span></span><br><span class="line"><span class="actionscript">							on: <span class="literal">false</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line"><span class="actionscript">							url: <span class="string">'#'</span>,</span></span><br><span class="line"><span class="actionscript">							src: <span class="string">'img/4.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'标题4'</span>,</span></span><br><span class="line"><span class="actionscript">							on: <span class="literal">false</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line"><span class="actionscript">							url: <span class="string">'#'</span>,</span></span><br><span class="line"><span class="actionscript">							src: <span class="string">'img/5.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'标题5'</span>,</span></span><br><span class="line"><span class="actionscript">							on: <span class="literal">false</span></span></span><br><span class="line">						&#125;</span><br><span class="line">					]</span><br><span class="line">				&#125;,</span><br><span class="line">				methods: &#123;</span><br><span class="line"><span class="actionscript">					toggle: <span class="function"><span class="keyword">function</span><span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.index = index;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.pics[index].on = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.pics.length; i++) &#123;</span></span><br><span class="line">							if (i !== index)</span><br><span class="line"><span class="actionscript">								<span class="keyword">this</span>.pics[i].on = <span class="literal">false</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;,</span><br><span class="line"><span class="actionscript">					mouseover: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">						clearInterval(<span class="keyword">this</span>.time);</span></span><br><span class="line">					&#125;,</span><br><span class="line"><span class="actionscript">					mouseout: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> that = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.time = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">							if (that.index == that.pics.length - 1) &#123;</span><br><span class="line">								that.index = 0;</span><br><span class="line"><span class="actionscript">								that.pics[<span class="number">0</span>].on = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">								that.pics[that.pics.length - <span class="number">1</span>].on = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">							&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">								++that.index;</span><br><span class="line"><span class="actionscript">								that.pics[that.index].on = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">								that.pics[that.index - <span class="number">1</span>].on = <span class="literal">false</span>;</span></span><br><span class="line">							&#125;</span><br><span class="line">						&#125;, 3000)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				computed: &#123;</span><br><span class="line"><span class="actionscript">					style: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">							marginLeft: <span class="keyword">this</span>.index * (<span class="number">-100</span>) + <span class="string">'%'</span>,</span></span><br><span class="line"><span class="actionscript">							width: <span class="keyword">this</span>.pics.length * <span class="number">100</span> + <span class="string">'%'</span></span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;,</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="actionscript">				mounted: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.mouseout();</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实现效果如图：<br><img src="/images/old.gif" alt="avatar" title="旧版轮播图"><br>这种轮播图原理是一串图片通过浮动拼在一起，利用marginLeft的位移作为动画实现的，比较容易实现，缺点是中间隔几个图的时候点击感觉比较晃，而且不是无缝轮播。</p>
<h3 id="新版轮播图"><a href="#新版轮播图" class="headerlink" title="新版轮播图"></a>新版轮播图</h3><p>接下来我们就来实现一下无缝轮播图，也就是新版B站首页所用的。<br>代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			* &#123;</span><br><span class="line">				margin: 0;</span><br><span class="line">				padding: 0;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			a &#123;</span><br><span class="line">				text-decoration: none;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			li &#123;</span><br><span class="line">				list-style-type: none;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> &#123;</span></span><br><span class="line">				max-width: 440px;</span><br><span class="line">				height: 220px;</span><br><span class="line">				position: relative;</span><br><span class="line">				overflow: hidden;</span><br><span class="line">				border-radius: 4px;</span><br><span class="line">				float: left;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.pic</span> &#123;</span></span><br><span class="line">				width: 440px;</span><br><span class="line">				height: 220px;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">				width: 440px;</span><br><span class="line">				height: 220px;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.pic</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">				position: absolute;</span><br><span class="line">				top: 0;</span><br><span class="line">				left: 0;</span><br><span class="line"><span class="css">				<span class="comment">/* 这里一定要改成绝对定位 */</span></span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="comment">/* 标题过渡 */</span></span></span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.title</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">				position: absolute;</span><br><span class="line">				bottom: 10px;</span><br><span class="line">				left: 10px;</span><br><span class="line"><span class="css">				<span class="selector-tag">transition</span>: <span class="selector-class">.5s</span>;</span></span><br><span class="line">				z-index: 999999;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.title</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">				color: white;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.trig</span> &#123;</span></span><br><span class="line">				position: absolute;</span><br><span class="line">				right: 35px;</span><br><span class="line">				bottom: 10px;</span><br><span class="line">				z-index: 999999;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.trig</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">				float: left;</span><br><span class="line">				background-image: url(img/icons.png);</span><br><span class="line">				background-position: -855px -790px;</span><br><span class="line">				width: 18px;</span><br><span class="line">				height: 18px;</span><br><span class="line">				margin-left: 5px;</span><br><span class="line">				cursor: pointer;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.carousel</span> <span class="selector-class">.trig</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">				background-position: -919px -790px;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.on</span> &#123;</span></span><br><span class="line">				background-position: -855px -727px !important;</span><br><span class="line">				width: 18px;</span><br><span class="line">				height: 18px;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.show</span> &#123;</span></span><br><span class="line">				opacity: 1;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.hide</span> &#123;</span></span><br><span class="line">				opacity: 0;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel"</span> @<span class="attr">mouseover</span>=<span class="string">"mouseover"</span> @<span class="attr">mouseout</span>=<span class="string">"mouseout"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pic"</span> <span class="attr">ref</span>=<span class="string">"pic"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in pics"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"pics[index].url"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"pics[index].src"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in pics"</span> <span class="attr">:class</span>=<span class="string">"pics[index].on?'show':'hide'"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"pics[index].url"</span>&gt;</span>&#123;&#123;pics[index].title&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"trig"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in pics"</span> <span class="attr">:class</span>=<span class="string">"&#123;on:pics[index].on&#125;"</span> @<span class="attr">click</span>=<span class="string">"toggle(index)"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'.carousel'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line">					index: 0,</span><br><span class="line"><span class="actionscript">					time: <span class="string">''</span>,</span></span><br><span class="line">					zindex: 1,</span><br><span class="line">					pics: [&#123;</span><br><span class="line"><span class="actionscript">							url: <span class="string">'#'</span>,</span></span><br><span class="line"><span class="actionscript">							src: <span class="string">'img/1.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'标题1'</span>,</span></span><br><span class="line"><span class="actionscript">							on: <span class="literal">true</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line"><span class="actionscript">							url: <span class="string">'#'</span>,</span></span><br><span class="line"><span class="actionscript">							src: <span class="string">'img/2.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'标题2'</span>,</span></span><br><span class="line"><span class="actionscript">							on: <span class="literal">false</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line"><span class="actionscript">							url: <span class="string">'#'</span>,</span></span><br><span class="line"><span class="actionscript">							src: <span class="string">'img/3.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'标题3'</span>,</span></span><br><span class="line"><span class="actionscript">							on: <span class="literal">false</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line"><span class="actionscript">							url: <span class="string">'#'</span>,</span></span><br><span class="line"><span class="actionscript">							src: <span class="string">'img/4.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'标题4'</span>,</span></span><br><span class="line"><span class="actionscript">							on: <span class="literal">false</span></span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line"><span class="actionscript">							url: <span class="string">'#'</span>,</span></span><br><span class="line"><span class="actionscript">							src: <span class="string">'img/5.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">							title: <span class="string">'标题5'</span>,</span></span><br><span class="line"><span class="actionscript">							on: <span class="literal">false</span></span></span><br><span class="line">						&#125;</span><br><span class="line">					]</span><br><span class="line">				&#125;,</span><br><span class="line">				methods: &#123;</span><br><span class="line"><span class="actionscript">					toggle: <span class="function"><span class="keyword">function</span><span class="params">(i)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.index = i;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.pics[i].on = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="keyword">this</span>.pics.length; j++) &#123;</span></span><br><span class="line">							if (j !== i)</span><br><span class="line"><span class="actionscript">								<span class="keyword">this</span>.pics[j].on = <span class="literal">false</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.zindex++;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$refs.pic.children[i].style.zIndex = <span class="keyword">this</span>.zindex;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$refs.pic.children[i].style.transform = <span class="string">'translate3d(0px,0px,0px)'</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$refs.pic.children[i].style.transition = <span class="string">'all 0.25s ease 0s'</span>;</span></span><br><span class="line">						if (i &gt;= 1) &#123;</span><br><span class="line"><span class="actionscript">							<span class="comment">//当前轮播图前面的全部向左移</span></span></span><br><span class="line"><span class="javascript">							<span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span></span><br><span class="line"><span class="actionscript">								<span class="keyword">this</span>.$refs.pic.children[j].style.transition = <span class="string">'all 0.55s ease 0s'</span>;</span></span><br><span class="line"><span class="actionscript">								<span class="keyword">this</span>.$refs.pic.children[j].style.transform = <span class="string">'translate3d(-440px,0px,0px)'</span>;</span></span><br><span class="line">							&#125;</span><br><span class="line"><span class="actionscript">						&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//点击第一个按钮，此时第一张图在最后一张图左边</span></span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.$refs.pic.children[<span class="keyword">this</span>.pics.length - <span class="number">1</span>].style.transition = <span class="string">'all 0.55s ease 0s'</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.$refs.pic.children[<span class="keyword">this</span>.pics.length - <span class="number">1</span>].style.transform = <span class="string">'translate3d(440px,0px,0px)'</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span> (i &lt; <span class="keyword">this</span>.pics.length - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//当前轮播图后面的全部向右移</span></span></span><br><span class="line"><span class="javascript">							<span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; <span class="keyword">this</span>.pics.length; j++) &#123;</span></span><br><span class="line"><span class="actionscript">								<span class="keyword">this</span>.$refs.pic.children[j].style.transition = <span class="string">'all 0.55s ease 0s'</span>;</span></span><br><span class="line"><span class="actionscript">								<span class="keyword">this</span>.$refs.pic.children[j].style.transform = <span class="string">'translate3d(440px,0px,0px)'</span>;</span></span><br><span class="line">							&#125;</span><br><span class="line"><span class="actionscript">						&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//点击最后一个按钮，此时第一张图在最后一张图左边</span></span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.$refs.pic.children[<span class="number">0</span>].style.transition = <span class="string">'all 0.55s ease 0s'</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.$refs.pic.children[<span class="number">0</span>].style.transform = <span class="string">'translate3d(-440px,0px,0px)'</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;,</span><br><span class="line"><span class="actionscript">					mouseover: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">						clearInterval(<span class="keyword">this</span>.time);</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//鼠标移入，第一张图在最后一张图左边</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span> (<span class="keyword">this</span>.index == <span class="keyword">this</span>.pics.length - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.$refs.pic.children[<span class="number">0</span>].style.transform = <span class="string">'translate3d(-440px,0px,0px)'</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">						<span class="comment">//鼠标移入，第一张图在最后一张图左边</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.index ==<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.$refs.pic.children[<span class="keyword">this</span>.pics.length - <span class="number">1</span>].style.transform = <span class="string">'translate3d(440px,0px,0px)'</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;,</span><br><span class="line"><span class="actionscript">					mouseout: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> that = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">var</span> i = that.index;</span></span><br><span class="line"><span class="actionscript">						<span class="comment">//鼠标移出，第一张图在最后一张图右边</span></span></span><br><span class="line">						if (i == that.pics.length - 1) &#123;</span><br><span class="line"><span class="actionscript">							that.$refs.pic.children[<span class="number">0</span>].style.transform = <span class="string">'translate3d(440px,0px,0px)'</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">						<span class="comment">//自动轮播</span></span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.time = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">							that.zindex++;</span><br><span class="line">							if (i == that.pics.length - 1) &#123;</span><br><span class="line">								i = 0;</span><br><span class="line"><span class="actionscript">							&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">								++i</span><br><span class="line">							&#125;</span><br><span class="line"><span class="actionscript">							that.index = i;<span class="comment">//必须储存index的值，否则值恒为0</span></span></span><br><span class="line">							that.$refs.pic.children[i].style.zIndex = that.zindex;</span><br><span class="line"><span class="actionscript">							that.$refs.pic.children[i].style.transform = <span class="string">'translate3d(0px,0px,0px)'</span>;</span></span><br><span class="line"><span class="actionscript">							that.$refs.pic.children[i].style.transition = <span class="string">'all 0.25s ease 0s'</span>;</span></span><br><span class="line"><span class="actionscript">							that.pics[i].on = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">							<span class="comment">//向左移动</span></span></span><br><span class="line">							if (i &gt; 0) &#123;</span><br><span class="line"><span class="actionscript">								that.$refs.pic.children[i - <span class="number">1</span>].style.transition = <span class="string">'all 0.55s ease 0s'</span>;</span></span><br><span class="line"><span class="actionscript">								that.$refs.pic.children[i - <span class="number">1</span>].style.transform = <span class="string">'translate3d(-440px,0px,0px)'</span>;</span></span><br><span class="line"><span class="actionscript">								that.pics[i - <span class="number">1</span>].on = <span class="literal">false</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">							&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">								that.$refs.pic.children[that.pics.length - <span class="number">1</span>].style.transition = <span class="string">'all 0.55s ease 0s'</span>;</span></span><br><span class="line"><span class="actionscript">								that.$refs.pic.children[that.pics.length - <span class="number">1</span>].style.transform = <span class="string">'translate3d(-440px,0px,0px)'</span>;</span></span><br><span class="line"><span class="actionscript">								that.pics[that.pics.length - <span class="number">1</span>].on = <span class="literal">false</span>;</span></span><br><span class="line">							&#125;</span><br><span class="line"><span class="actionscript">							<span class="comment">//向右移动</span></span></span><br><span class="line">							if (i &lt; that.pics.length - 1) &#123;</span><br><span class="line"><span class="actionscript">								that.$refs.pic.children[i + <span class="number">1</span>].style.transition = <span class="string">'none 0s ease 0s'</span>;</span></span><br><span class="line"><span class="actionscript">								that.$refs.pic.children[i + <span class="number">1</span>].style.transform = <span class="string">'translate3d(440px,0px,0px)'</span>;</span></span><br><span class="line"><span class="actionscript">							&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">								that.$refs.pic.children[<span class="number">0</span>].style.transition = <span class="string">'none 0s ease 0s'</span>;</span></span><br><span class="line"><span class="actionscript">								that.$refs.pic.children[<span class="number">0</span>].style.transform = <span class="string">'translate3d(440px,0px,0px)'</span>;</span></span><br><span class="line">							&#125;</span><br><span class="line">						&#125;, 3000)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="actionscript">				mounted: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.mouseout();</span></span><br><span class="line"><span class="actionscript">					<span class="comment">//初始状态，即0++++</span></span></span><br><span class="line"><span class="javascript">					<span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; <span class="keyword">this</span>.pics.length; j++) &#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.$refs.pic.children[j].style.transform = <span class="string">'translate3d(440px,0px,0px)'</span></span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.$refs.pic.children[<span class="number">0</span>].style.zIndex = <span class="string">'1'</span>;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种轮播图比起上一种要复杂的多，但是看起来非常舒服，甚至比swiper的轮播图还要高档，给人的感觉就好像是两张图在相互切换，其他图在怎么变换根本看不出来。<br>根据我仔细的观察，分析出了原理，主要是通过translate3d变换位移，还需要加上叠放次序zindex，不然顺序会乱，你会看到其中一张图在过渡的时候压到其他图，这里的过渡要分开加，而不是写在CSS中，不是无脑加，第一张往最后一张图后面移动时不能有过渡动画，重点还要考虑第一张图和最后一张图的位置关系，这里一个过渡0.25s和一个过渡0.55s并不是没有道理,如果都设为0.55s可能会看到其它图的过渡惨杂进来<br>实现效果如图：<br><img src="/images/new.gif" alt="avatar" title="新版轮播图"></p>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>轮播图</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能真人动作数据提取</title>
    <url>/2020/02/12/openmmd/</url>
    <content><![CDATA[<p>如果你是一位MMDer，而且想提高K帧效率，那么这篇基于Python的k帧软件你就可以试一试了。<br>OpenMMD到底是干啥的？简洁地讲，OpenMMD是一个可以直接分析现成视频（各种MP4, AVI等视频格式），自动生成vmd动作文件的工具；也就是说，你可以随便从网上找一个（或者自己录一个）人类的舞蹈动作视频，然后直接使用这个分析工具就可以生成该舞蹈动作对应的vmd格式的文件了。<br>不过这里有一点值得说明，这个仅仅是辅助工具而已，至少目前是做不到完美复现原视频的所有动作的，因此想制作出好的视频依旧需要你对k帧去修补美化一番。<br>原github项目：<a href="https://github.com/peterljq/OpenMMD" target="_blank" rel="noopener">https://github.com/peterljq/OpenMMD</a><br>由于github下载慢，推荐网盘：<a href="https://pan.baidu.com/s/1HihyHvivUjkKo6uQP2Bfuw" target="_blank" rel="noopener">https://pan.baidu.com/s/1HihyHvivUjkKo6uQP2Bfuw</a><br>提取码：9ita</p>
<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>先配置python环境:<br>我这里用的是python3.7版本，win7系统，CPU：g4560</p>
<ul>
<li>pip install h5py</li>
<li>pip install opencv-python</li>
<li>pip install matplotlib==3.0.0</li>
<li>pip install tensorflow==1.13.1  (这个东西对系统的兼容不是很友好，如果你的CPU不支持AVX,你需要自己手动去找适合你CPU的tensorflow，我这里用的是tensorflow-1.13.1-cp37-cp37m-win_amd64.whl)</li>
<li>pip install pyqt5<h3 id="开始运行"><a href="#开始运行" class="headerlink" title="开始运行"></a>开始运行</h3>准备一个视频或者图片（要清晰，最好是全身）<h4 id="1-打开OpenposeVideo-bat，拖入你的视频文件或者图片，一路回车，执行完毕后会生成-json文件夹和生成的视频文件"><a href="#1-打开OpenposeVideo-bat，拖入你的视频文件或者图片，一路回车，执行完毕后会生成-json文件夹和生成的视频文件" class="headerlink" title="1.打开OpenposeVideo.bat，拖入你的视频文件或者图片，一路回车，执行完毕后会生成_json文件夹和生成的视频文件"></a>1.打开OpenposeVideo.bat，拖入你的视频文件或者图片，一路回车，执行完毕后会生成_json文件夹和生成的视频文件</h4><h4 id="2-打开OpenposeTo3D-bat，拖入-json文件夹，生成类似json-3d-2019xxxx-1xxxx-idx01的文件夹，一路回车，如果出现tensorflow的报错你就得重下tensorflow了"><a href="#2-打开OpenposeTo3D-bat，拖入-json文件夹，生成类似json-3d-2019xxxx-1xxxx-idx01的文件夹，一路回车，如果出现tensorflow的报错你就得重下tensorflow了" class="headerlink" title="2.打开OpenposeTo3D.bat，拖入_json文件夹，生成类似json_3d_2019xxxx_1xxxx_idx01的文件夹，一路回车，如果出现tensorflow的报错你就得重下tensorflow了"></a>2.打开OpenposeTo3D.bat，拖入_json文件夹，生成类似json_3d_2019xxxx_1xxxx_idx01的文件夹，一路回车，如果出现tensorflow的报错你就得重下tensorflow了</h4><h4 id="3-打开VideoToDepth-bat，拖入生成好的视频文件和json-3d-2019xxxx-1xxxx-idx01文件夹，一路回车"><a href="#3-打开VideoToDepth-bat，拖入生成好的视频文件和json-3d-2019xxxx-1xxxx-idx01文件夹，一路回车" class="headerlink" title="3.打开VideoToDepth.bat，拖入生成好的视频文件和json_3d_2019xxxx_1xxxx_idx01文件夹，一路回车"></a>3.打开VideoToDepth.bat，拖入生成好的视频文件和json_3d_2019xxxx_1xxxx_idx01文件夹，一路回车</h4><h4 id="4-打开3DToVmd-bat，先拖入json-3d-2019xxxx-1xxxx-idx01文件夹，接着找到born文件夹里的あにまさ式ミクボーン-csv拖入，不拖入的话会出现编码错误，一路回车，如果出现unrecognized-arguments-s-1错误，就删掉3DToVmd-bat文件最后一行里的’-s-SMOOTH-TIMES-’"><a href="#4-打开3DToVmd-bat，先拖入json-3d-2019xxxx-1xxxx-idx01文件夹，接着找到born文件夹里的あにまさ式ミクボーン-csv拖入，不拖入的话会出现编码错误，一路回车，如果出现unrecognized-arguments-s-1错误，就删掉3DToVmd-bat文件最后一行里的’-s-SMOOTH-TIMES-’" class="headerlink" title="4.打开3DToVmd.bat，先拖入json_3d_2019xxxx_1xxxx_idx01文件夹，接着找到born文件夹里的あにまさ式ミクボーン.csv拖入，不拖入的话会出现编码错误，一路回车，如果出现unrecognized arguments: -s 1错误，就删掉3DToVmd.bat文件最后一行里的’-s %SMOOTH_TIMES%’"></a>4.打开3DToVmd.bat，先拖入json_3d_2019xxxx_1xxxx_idx01文件夹，接着找到born文件夹里的あにまさ式ミクボーン.csv拖入，不拖入的话会出现编码错误，一路回车，如果出现unrecognized arguments: -s 1错误，就删掉3DToVmd.bat文件最后一行里的’-s %SMOOTH_TIMES%’</h4>最后会生成一个VMD就是我们所要的了<br>效果如下图（亲自测试）<br><img src="/images/openmmd.gif" alt="avatar" title="效果图"></li>
</ul>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>mmd</tag>
        <tag>tensorflow</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue实现购物车</title>
    <url>/2020/02/07/vue/</url>
    <content><![CDATA[<p>主要实现的功能有：商品的单价，商品的总价，商品的单选和全选，商品数量的修改，商品的删除等功能。<br>该小型项目采用Vue框架作为主要操作DOM的手段，代码完全原创<br>实现效果如下：<br><img src="/images/shop.gif" alt="avatar" title="购物车效果图"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">			html &#123;</span><br><span class="line">				font-size: 100px;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			body &#123;</span><br><span class="line">				font-size: 16px;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			* &#123;</span><br><span class="line">				margin: 0;</span><br><span class="line">				padding: 0;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			li &#123;</span><br><span class="line">				list-style-type: none;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">margin-top</span>: 0<span class="selector-class">.4rem</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.shop-item</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">height</span>: 1<span class="selector-class">.3rem</span>;</span></span><br><span class="line">				display: flex;</span><br><span class="line">				justify-content: space-between;</span><br><span class="line">				align-items: center;</span><br><span class="line">				background: rgb(252, 252, 252);</span><br><span class="line"><span class="css">				<span class="selector-tag">margin-top</span>: 0<span class="selector-class">.1rem</span>;</span></span><br><span class="line">				position: relative;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.shop-item</span><span class="selector-pseudo">:nth-last-of-type(1)</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">margin-bottom</span>: 0<span class="selector-class">.6rem</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.shop-item</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">border</span>: 0<span class="selector-class">.01rem</span> <span class="selector-tag">solid</span> <span class="selector-id">#e5e5e5</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.delete</span> &#123;</span></span><br><span class="line">				height: 100%;</span><br><span class="line"><span class="css">				<span class="selector-tag">width</span>: 0<span class="selector-class">.6rem</span>;</span></span><br><span class="line">				color: white;</span><br><span class="line">				outline: none;</span><br><span class="line">				background: rgb(221, 0, 27);</span><br><span class="line">				border: none;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.delete</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">				content: '删除';</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line">				text-decoration: none;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.shop-item</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">margin-left</span>: 0<span class="selector-class">.05rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">max-height</span>: 0<span class="selector-class">.8rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">max-width</span>: 0<span class="selector-class">.8rem</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.shop-item</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">color</span>: <span class="selector-id">#3c3c3c</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.shop-name</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">font-size</span>: 0<span class="selector-class">.12rem</span>;</span></span><br><span class="line">				overflow: hidden;</span><br><span class="line"><span class="css">				<span class="selector-tag">height</span>: 0<span class="selector-class">.5rem</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.shop-name</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">color</span>: <span class="selector-id">#f40</span>;</span></span><br><span class="line">				text-decoration: underline;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.size</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">color</span>: <span class="selector-id">#9c9c9c</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">font-size</span>: 0<span class="selector-class">.12rem</span>;</span></span><br><span class="line">				overflow: hidden;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.item-main</span> &#123;</span></span><br><span class="line">				box-sizing: border-box;</span><br><span class="line"><span class="css">				<span class="selector-tag">padding</span>: 0 0 0 0<span class="selector-class">.05rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">height</span>: 0<span class="selector-class">.8rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">width</span>: 1<span class="selector-class">.5rem</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">color</span>: <span class="selector-id">#3c3c3c</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">font-size</span>: 0<span class="selector-class">.12rem</span>;</span></span><br><span class="line">				font-weight: 700;</span><br><span class="line">				font-family: Verdana, Tahoma, arial;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.count</span> &#123;</span></span><br><span class="line">				outline: none;</span><br><span class="line">				box-sizing: border-box;</span><br><span class="line"><span class="css">				<span class="selector-tag">height</span>: 0<span class="selector-class">.25rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">line-height</span>: 0<span class="selector-class">.15rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">border</span>: 0<span class="selector-class">.01rem</span> <span class="selector-tag">solid</span> <span class="selector-id">#aaa</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">color</span>: <span class="selector-id">#343434</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">width</span>: 0<span class="selector-class">.4rem</span>;</span></span><br><span class="line">				text-align: center;</span><br><span class="line"><span class="css">				<span class="selector-tag">padding</span>: 0<span class="selector-class">.04rem</span> 0<span class="selector-class">.05rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">background-position</span>: <span class="selector-tag">-0</span><span class="selector-class">.75rem</span> <span class="selector-tag">-3</span><span class="selector-class">.75rem</span>;</span></span><br><span class="line">				float: left;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.reduce</span>,<span class="selector-class">.add</span> &#123;</span></span><br><span class="line">				float: left;</span><br><span class="line"><span class="css">				<span class="selector-tag">height</span>: 0<span class="selector-class">.25rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">width</span>: 0<span class="selector-class">.15rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">border</span>: 0<span class="selector-class">.01rem</span> <span class="selector-tag">solid</span> <span class="selector-id">#e5e5e5</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">background</span>: <span class="selector-id">#f0f0f0</span>;</span></span><br><span class="line">				text-align: center;</span><br><span class="line"><span class="css">				<span class="selector-tag">line-height</span>: 0<span class="selector-class">.23rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">color</span>: <span class="selector-id">#444</span>;</span></span><br><span class="line">				top: 0;</span><br><span class="line">				outline: none;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-id">#countbox</span> &#123;</span></span><br><span class="line">				display: flex;</span><br><span class="line">				flex-flow: nowrap;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.item-sum</span> &#123;</span></span><br><span class="line">				text-align: center;</span><br><span class="line"><span class="css">				<span class="selector-tag">color</span>: <span class="selector-id">#f40</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">font-size</span>: 0<span class="selector-class">.12rem</span>;</span></span><br><span class="line">				font-weight: 700;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.total</span> <span class="selector-class">.item-total</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">font-size</span>: 0<span class="selector-class">.12rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">color</span>: <span class="selector-id">#f40</span>;</span></span><br><span class="line">				font-weight: 700;</span><br><span class="line">				right: 100px;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.head</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">height</span>: 0<span class="selector-class">.3rem</span>;</span></span><br><span class="line">				background: rgb(221, 0, 27);</span><br><span class="line">				width: 100%;</span><br><span class="line">				display: flex;</span><br><span class="line">				justify-content: center;</span><br><span class="line">				align-items: center;</span><br><span class="line">				color: white;</span><br><span class="line">				position: fixed;</span><br><span class="line">				top: 0;</span><br><span class="line">				z-index: 999;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.foot</span> &#123;				</span></span><br><span class="line">				z-index: 999;</span><br><span class="line"><span class="css">				<span class="selector-tag">height</span>: 0<span class="selector-class">.5rem</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">background</span>: <span class="selector-id">#E5E5E5</span>;</span></span><br><span class="line">				width: 100%;</span><br><span class="line">				display: flex;</span><br><span class="line">				justify-content: space-between;</span><br><span class="line">				align-items: center;</span><br><span class="line">				color: white;</span><br><span class="line">				position: fixed;</span><br><span class="line">				bottom: 0;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.total</span> &#123;</span></span><br><span class="line">				display: flex;</span><br><span class="line">				flex-flow: nowrap;</span><br><span class="line">				align-items: center;</span><br><span class="line">				color: black;</span><br><span class="line">				height: 100%;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.head</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">				content: '购物车';</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.footse</span> &#123;</span></span><br><span class="line">				align-items: center;</span><br><span class="line"><span class="css">				<span class="selector-tag">margin-left</span>: 0<span class="selector-class">.1rem</span>;</span></span><br><span class="line">				display: flex;</span><br><span class="line">				flex-flow: nowrap;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.foottext</span> &#123;</span></span><br><span class="line">				color: black;</span><br><span class="line">				font-size: 14px;</span><br><span class="line">				white-space: nowrap;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.foottext</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">				content: '全选';</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.submit</span> &#123;</span></span><br><span class="line">				border: none;</span><br><span class="line">				outline: none;</span><br><span class="line">				height: 100%;</span><br><span class="line"><span class="css">				<span class="selector-tag">width</span>: 0<span class="selector-class">.6rem</span>;</span></span><br><span class="line">				color: white;</span><br><span class="line">				background: rgb(221, 0, 27);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.submit</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">				content: '结算';</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line"><span class="css">			<span class="selector-class">.singleselect</span> &#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">margin-left</span>: 0<span class="selector-class">.1rem</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.nodata</span>&#123;</span></span><br><span class="line">				display: flex;</span><br><span class="line">				margin: 0 auto;</span><br><span class="line">				height: 3rem;</span><br><span class="line">				width: 3rem;</span><br><span class="line">				background-image: url(img/nodata02.png);</span><br><span class="line">				background-repeat: no-repeat;</span><br><span class="line">				justify-content: center;</span><br><span class="line">				align-items: flex-end;</span><br><span class="line">				background-size: cover;</span><br><span class="line">				font-size: 14px;</span><br><span class="line"><span class="css">				<span class="selector-tag">color</span>: <span class="selector-id">#6d757a</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line"><span class="css">			<span class="selector-class">.totaltxt</span>&#123;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">padding-right</span>: 0<span class="selector-class">.1rem</span>;</span></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"head"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"items.length"</span>&gt;</span>			</span><br><span class="line">			<span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shop-item"</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"items[index].checked"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"singleselect"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.src"</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-main"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shop-name"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"size"</span>&gt;</span>&#123;&#123;item.size&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"price"</span>&gt;</span>￥&#123;&#123;item.price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"countbox"</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"countReduce(index)"</span> <span class="attr">class</span>=<span class="string">"reduce"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"item.count"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"count"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"countAdd(index)"</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-sum"</span>&gt;</span>￥&#123;&#123;item.price*item.count&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-on:click</span>=<span class="string">"bookRemove"</span> <span class="attr">class</span>=<span class="string">"delete"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foot"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footse"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> @<span class="attr">click</span>=<span class="string">"all"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"allselect"</span> <span class="attr">value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"allselect"</span> <span class="attr">class</span>=<span class="string">"foottext"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"total"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"totaltxt"</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-size: 14px;white-space: nowrap;"</span>&gt;</span>合计:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"item-total"</span>&gt;</span>￥&#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span>						</span><br><span class="line">					<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">footer</span>&gt;</span>			</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nodata"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">p</span>&gt;</span>你还暂时没有商品哦~<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foot"</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footse"</span>&gt;</span>						</span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">			el: <span class="string">'#box'</span>,</span></span><br><span class="line">			data: &#123;</span><br><span class="line"><span class="actionscript">				keywords:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">				checked: <span class="literal">false</span>,</span></span><br><span class="line">				items: [&#123;</span><br><span class="line"><span class="actionscript">						src: <span class="string">'https://img.alicdn.com/bao/uploaded/i1/2200798231128/O1CN01OpBz5w1KCfK7ZIb5g_!!2200798231128.jpg_80x80.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">						name: <span class="string">'优质舰队collection舰娘响手办响爷二次元动漫美少女机箱精品摆件'</span>,</span></span><br><span class="line"><span class="actionscript">						size: <span class="string">'尺寸：精品现货送海报'</span>,</span></span><br><span class="line">						price: 79,</span><br><span class="line">						count: 1,</span><br><span class="line"><span class="actionscript">						checked: <span class="literal">false</span></span></span><br><span class="line">					&#125;,</span><br><span class="line">					&#123;</span><br><span class="line"><span class="actionscript">						src: <span class="string">'https://img.alicdn.com/bao/uploaded/i3/1085315961/O1CN013r8Hhq1tuBWw3AoNp_!!0-item_pic.jpg_80x80.jpg'</span>,</span></span><br><span class="line"><span class="actionscript">						name: <span class="string">'【年货价】Razer雷蛇黑寡妇蜘蛛竞技幻彩版V2电竞游戏87机械键盘RGB背光吃鸡'</span>,</span></span><br><span class="line"><span class="actionscript">						size: <span class="string">'套餐类型：官方标配 颜色分类：87键(绿轴)'</span>,</span></span><br><span class="line">						price: 749,</span><br><span class="line">						count: 1,</span><br><span class="line"><span class="actionscript">						checked: <span class="literal">false</span></span></span><br><span class="line">					&#125;</span><br><span class="line">				]</span><br><span class="line">			&#125;,</span><br><span class="line"><span class="actionscript">			mounted: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;,</span></span><br><span class="line">			methods: &#123;</span><br><span class="line"><span class="actionscript">				all: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">if</span> (!<span class="keyword">this</span>.checked) &#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.items.length; i++) &#123;						</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.items[i].checked=<span class="literal">true</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">					<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.items.length; i++) &#123;						</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.items[i].checked=<span class="literal">false</span>;</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="actionscript">				countAdd: <span class="function"><span class="keyword">function</span><span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.items[index].count++;</span></span><br><span class="line"></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="actionscript">				countReduce: <span class="function"><span class="keyword">function</span><span class="params">(index)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">if</span> (<span class="keyword">this</span>.items[index].count == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span>;</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.items[index].count--;</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="actionscript">				bookRemove: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.items.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.items.splice(i, <span class="number">1</span>);</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line"><span class="actionscript">				search:<span class="function"><span class="keyword">function</span><span class="params">(keywords)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				 <span class="keyword">var</span> newList=[];</span></span><br><span class="line"><span class="actionscript">				 <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.items.length;i++)&#123;</span></span><br><span class="line"><span class="actionscript">				  <span class="keyword">if</span>(<span class="keyword">this</span>.items[i].name.indexOf(keywords)!==<span class="number">-1</span>)&#123;</span></span><br><span class="line"><span class="actionscript">				    newList.push(<span class="keyword">this</span>.items[i])</span></span><br><span class="line">				  &#125;</span><br><span class="line">				 &#125;</span><br><span class="line"><span class="actionscript">				 <span class="keyword">return</span> newList</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;,</span><br><span class="line">			computed: &#123;</span><br><span class="line"><span class="actionscript">				sum: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">var</span> total = <span class="number">0</span>;					</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.items.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span>(<span class="keyword">this</span>.items[i].checked==<span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="actionscript">						total += <span class="keyword">this</span>.items[i].price * <span class="keyword">this</span>.items[i].count;&#125;</span></span><br><span class="line">					&#125;</span><br><span class="line"><span class="actionscript">					<span class="keyword">return</span> total;</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>原创</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>购物车</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式详解</title>
    <url>/2020/02/06/exp/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>/</td>
<td>将下一个字符标记符、或一个向后引用、或一个八进制转义符。例如，“\n”匹配\n。“\n”匹配换行符。序列“\”匹配“\”而“(”则匹配“(”。即相当于多种编程语言中都有的“转义字符”的概念。</td>
</tr>
<tr>
<td>^</td>
<td>匹配输入字行首。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。</td>
</tr>
<tr>
<td>$</td>
<td>匹配输入行尾。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。</td>
</tr>
<tr>
<td>*</td>
<td>匹配前面的子表达式任意次。例如，zo<em>能匹配“z”，也能匹配“zo”以及“zoo”。</em>等价于{0,}。</td>
</tr>
<tr>
<td>+</td>
<td>匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。</td>
</tr>
<tr>
<td>?</td>
<td>匹配前面的子表达式零次或一次。例如，“do(es)?”可以匹配“do”或“does”。?等价于{0,1}。</td>
</tr>
<tr>
<td>{n}</td>
<td>n是一个非负整数。匹配确定的n次。例如，“o{2}”不能匹配“Bob”中的“o”，但是能匹配“food”中的两个o。</td>
</tr>
<tr>
<td>{n,}</td>
<td>n是一个非负整数。至少匹配n次。例如，“o{2,}”不能匹配“Bob”中的“o”，但能匹配“foooood”中的所有o。“o{1,}”等价于“o+”。“o{0,}”则等价于“o*”。</td>
</tr>
<tr>
<td>{n,m}</td>
<td>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。例如，“o{1,3}”将匹配“fooooood”中的前三个o为一组，后三个o为一组。“o{0,1}”等价于“o?”。请注意在逗号和两个数之间不能有空格。</td>
</tr>
<tr>
<td>?</td>
<td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少地匹配所搜索的字符串，而默认的贪婪模式则尽可能多地匹配所搜索的字符串。例如，对于字符串“oooo”，“o+”将尽可能多地匹配“o”，得到结果[“oooo”]，而“o+?”将尽可能少地匹配“o”，得到结果 [‘o’, ‘o’, ‘o’, ‘o’]</td>
</tr>
<tr>
<td>.点</td>
<td>匹配除“\n”和”\r”之外的任何单个字符。要匹配包括“\n”和”\r”在内的任何字符，请使用像“[\s\S]”的模式。</td>
</tr>
<tr>
<td>(pattern)</td>
<td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“(”或“)”。</td>
</tr>
<tr>
<td>(?:pattern)</td>
<td>非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(</td>
</tr>
<tr>
<td>(?=pattern)</td>
<td>非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?=95</td>
</tr>
<tr>
<td>(?!pattern)</td>
<td>非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95</td>
</tr>
<tr>
<td>(?&lt;=pattern)</td>
<td>非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;=95</td>
</tr>
<tr>
<td>(?&lt;!patte_n)</td>
<td>非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95</td>
</tr>
<tr>
<td>x&#124;y</td>
<td>匹配x或y。例如，“z&#124;food”能匹配“z”或“food”(此处请谨慎)。“[z&#124;f]ood”则匹配“zood”或“food”。</td>
</tr>
<tr>
<td>[xyz]</td>
<td>字符集合。匹配所包含的任意一个字符。例如，“[abc]”可以匹配“plain”中的“a”。</td>
</tr>
<tr>
<td>[^xyz]</td>
<td>负值字符集合。匹配未包含的任意字符。例如，“[^abc]”可以匹配“plain”中的“plin”任一字符,匹配除了xyz以外的任意字符</td>
</tr>
<tr>
<td>[a-z]</td>
<td>字符范围。匹配指定范围内的任意字符。例如，“[a-z]”可以匹配“a”到“z”范围内的任意小写字母字符。   注意:只有连字符在字符组内部时,并且出现在两个字符之间时,才能表示字符的范围; 如果出字符组的开头,则只能表示连字符本身.</td>
</tr>
<tr>
<td>[^a-z]</td>
<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]”可以匹配任何不在“a”到“z”范围内的任意字符。</td>
</tr>
<tr>
<td>\b</td>
<td>匹配一个单词的边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\b就是匹配位置的）。例如，“er\b”可以匹配“never”中的“er”，但不能匹配“verb”中的“er”；“\b1_”可以匹配“1_23”中的“1_”，但不能匹配“21_3”中的“1_”。</td>
</tr>
<tr>
<td>\B</td>
<td>匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。</td>
</tr>
<tr>
<td>\cx</td>
<td>匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“c”字符。</td>
</tr>
<tr>
<td>\d</td>
<td>匹配一个数字字符。等价于[0-9]。grep 要加上-P，perl正则支持</td>
</tr>
<tr>
<td>\D</td>
<td>匹配一个非数字字符。等价于[^0-9]。grep要加上-P，perl正则支持</td>
</tr>
<tr>
<td>\f</td>
<td>匹配一个换页符。等价于\x0c和\cL。</td>
</tr>
<tr>
<td>\n</td>
<td>匹配一个换行符。等价于\x0a和\cJ。</td>
</tr>
<tr>
<td>\r</td>
<td>匹配一个回车符。等价于\x0d和\cM。</td>
</tr>
<tr>
<td>\s</td>
<td>匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\S</td>
<td>匹配任何可见字符。等价于[^ \f\n\r\t\v]。</td>
</tr>
<tr>
<td>\t</td>
<td>匹配一个制表符。等价于\x09和\cI。</td>
</tr>
<tr>
<td>\v</td>
<td>匹配一个垂直制表符。等价于\x0b和\cK。</td>
</tr>
<tr>
<td>\w</td>
<td>匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的”单词”字符使用Unicode字符集。</td>
</tr>
<tr>
<td>\W</td>
<td>匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。</td>
</tr>
<tr>
<td>\xn</td>
<td>匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\x41”匹配“A”。“\x041”则等价于“\x04&amp;1”。正则表达式中可以使用ASCII编码。</td>
</tr>
<tr>
<td>\num</td>
<td>匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“(.)\1”匹配两个连续的相同字符。</td>
</tr>
<tr>
<td>\n</td>
<td>标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td>
</tr>
<tr>
<td>\nm</td>
<td>标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。</td>
</tr>
<tr>
<td>\nml</td>
<td>如果n为八进制数字（0-7），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td>
</tr>
<tr>
<td>\un</td>
<td>匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（&copy;）。</td>
</tr>
<tr>
<td>\p{P}</td>
<td>小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。中括号内的“P”表示Unicode 字符集七个字符属性之一：标点字符。</td>
</tr>
<tr>
<td>&lt;  &gt;</td>
<td>匹配词（word）的开始（&lt;）和结束（&gt;）。例如正则表达式&lt;the&gt;能够匹配字符串”for the wise”中的”the”，但是不能匹配字符串”otherwise”中的”the”。注意：这个元字符不是所有的软件都支持的。</td>
</tr>
<tr>
<td>( )</td>
<td>将( 和 ) 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \1 到\9 的符号来引用。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>表达式</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>?=exp</td>
<td>正向前瞻</td>
<td>零宽度，断言出现的位置后面能匹配exp，则匹配成功，匹配不占据匹配长度，非捕获</td>
</tr>
<tr>
<td>?!exp</td>
<td>负向前瞻</td>
<td>零宽度，断言出现的位置后面不能匹配exp，则匹配成功，匹配不占据匹配长度，非捕获</td>
</tr>
<tr>
<td>?:exp</td>
<td>正向前瞻</td>
<td>非捕获性分组，断言出现位置后面匹配exp，占据查询的匹配长度</td>
</tr>
</tbody></table>
<pre><code>正则表达式应用——实例应用</code></pre><p>1.验证用户名和密码：（”^[a-zA-Z]\w{5,15}$”）正确格式：”[A-Z][a-z]_[0-9]”组成,并且第一个字必须为字母6-16位；<br>2.验证电话号码：（”^(\d{3,4}-)\d{7,8}$”）正确格式：xxx/xxxx-xxxxxxx/xxxxxxxx；<br>3.验证手机号码（包含虚拟号码和新号码段）：”^1([38][0-9]|4[5-9]|5[0-3,5-9]|66|7[0-8]|9[89])[0-9]{8}$”；<br>4.验证身份证号（15位）：”\d{14}[[0-9],0-9xX]”，（18位）：”\d{17}(\d|X|x)”；<br>5.验证Email地址：(“^\w+([-+.]\w+)<em>@\w+([-.]\w+)*.\w+([-.]\w+)</em>$”)；<br>6.只能输入由数字和26个英文字母组成的字符串：(“^[A-Za-z0-9]+$”)；<br>7.整数或者小数：^[0-9]+([.][0-9]+){0,1}$<br>8.只能输入数字：”^[0-9]<em>$”。<br>9.只能输入n位的数字：”^\d{n}$”。<br>10.只能输入至少n位的数字：”^\d{n,}$”。<br>11.只能输入m-n位的数字：”^\d{m,n}$”。<br>12.只能输入零和非零开头的数字：”^(0|[1-9][0-9]</em>)$”。<br>13.只能输入有两位小数的正实数：”^[0-9]+(.[0-9]{2})?$”。<br>14.只能输入有1-3位小数的正实数：”^[0-9]+(.[0-9]{1,3})?$”。<br>15.只能输入非零的正整数：”^+?[1-9][0-9]<em>$”。<br>16.只能输入非零的负整数：”^-[1-9][0-9]</em>$”。<br>17.只能输入长度为3的字符：”^.{3}$”。<br>18.只能输入由26个英文字母组成的字符串：”^[A-Za-z]+$”。<br>19.只能输入由26个大写英文字母组成的字符串：”^[A-Z]+$”。<br>20.只能输入由26个小写英文字母组成的字符串：”^[a-z]+$”。<br>21.验证是否含有^%&amp;’,;=?$&quot;等字符：”[%&amp;’,;=?$\^]+”。<br>22.只能输入汉字：”^[\u4e00-\u9fa5]{0,}$”。<br>23.验证URL：”^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]<em>)?$”。<br>24.验证一年的12个月：”^(0?[1-9]|1[0-2])$”正确格式为：”01”～”09”和”10”～”12”。<br>25.验证一个月的31天：”^((0?[1-9])|((1|2)[0-9])|30|31)$”正确格式为；”01”～”09”、”10”～”29”和“30”~“31”。<br>26.获取日期正则表达式：\d{4}[年|-|.]\d{\1-\12}[月|-|.]\d{\1-\31}日?<br>评注：可用来匹配大多数年月日信息。<br>27.匹配双字节字符(包括汉字在内)：[^\x00-\xff]<br>评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）<br>28.匹配空白行的正则表达式：\n\s*\r<br>评注：可以用来删除空白行<br>29.匹配HTML标记的正则表达式：&lt;(\S</em>?)[^&gt;]<em>&gt;.</em>?&lt;/&gt;|&lt;.<em>? /&gt;<br>评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力<br>30.匹配首尾空白字符的正则表达式：^\s</em>|\s<em>$<br>评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式<br>31.匹配网址URL的正则表达式：[a-zA-z]+://[^\s]</em><br>评注：网上流传的版本功能很有限，上面这个基本可以满足需求<br>32.匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$<br>评注：表单验证时很实用<br>33.匹配腾讯QQ号：[1-9][0-9]{4,}<br>评注：腾讯QQ号从10 000 开始<br>34.匹配中国邮政编码：[1-9]\d{5}(?!\d)<br>评注：中国邮政编码为6位数字<br>35.匹配ip地址：([1-9]{1,3}.){3}[1-9]。<br>评注：提取ip地址时有用<br>36.匹配MAC地址：([A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>Regexp</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯常用API协议(pc端)</title>
    <url>/2020/02/06/api/</url>
    <content><![CDATA[<p>个人收集的一些腾讯的相关接口,主要用于与QQ用户信息交互<br>最常见的用于网页推广：<br>加群a标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"//shang.qq.com/wpa/qunwpa?idkey=e9a5b03d975943a70449aecd9b9724411694c67bb20edb7f3c52a016ce5a93ea"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">src</span>=<span class="string">"//pub.idqqimg.com/wpa/images/group.png"</span> <span class="attr">alt</span>=<span class="string">"****"</span> <span class="attr">title</span>=<span class="string">"****"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>qq通讯a标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://wpa.qq.com/msgrd?v=3&amp;uin=qq号&amp;site=qq&amp;menu=yes"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">src</span>=<span class="string">"http://wpa.qq.com/pa?p=2:qq号:51"</span> <span class="attr">alt</span>=<span class="string">"点击这里给我发消息"</span> <span class="attr">title</span>=<span class="string">"点击这里给我发消息"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>QQ昵称:<a href="https://users.qzone.qq.com/fcg-bin/cgi_get_portrait.fcg?uins=QQ号" target="_blank" rel="noopener">https://users.qzone.qq.com/fcg-bin/cgi_get_portrait.fcg?uins=QQ号</a><br>头像:<a href="http://q2.qlogo.cn/headimg_dl?dst_uin=QQ号&amp;spec=100" target="_blank" rel="noopener">http://q2.qlogo.cn/headimg_dl?dst_uin=QQ号&amp;spec=100</a><br>高清头像:<a href="http://q.qlogo.cn/headimg_dl?dst_uin=QQ号&amp;spec=640" target="_blank" rel="noopener">http://q.qlogo.cn/headimg_dl?dst_uin=QQ号&amp;spec=640</a><br>群头像:<a href="http://p.qlogo.cn/gh/群号/群号/100" target="_blank" rel="noopener">http://p.qlogo.cn/gh/群号/群号/100</a><br>群高清头像:<a href="http://p.qlogo.cn/gh/群号/群号/640" target="_blank" rel="noopener">http://p.qlogo.cn/gh/群号/群号/640</a><br>QQ空间头像:<a href="http://qlogo1.store.qq.com/qzone/QQ号/QQ号/100" target="_blank" rel="noopener">http://qlogo1.store.qq.com/qzone/QQ号/QQ号/100</a><br>QQ资料:tencent://ContactInfo/?subcmd=ViewInfo&amp;puin=0&amp;uin=QQ号&amp;fuin=QQ号<br>加好友:tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=QQ号&amp;fuin=QQ号<br>加群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=群key" target="_blank" rel="noopener">http://shang.qq.com/wpa/qunwpa?idkey=群key</a><br>发起群会话:tencent://groupwpa/?subcmd=all\u0026param=群字段fuin=QQ号<br>发起好友临时会话:tencent://Message/?Uin=QQ号&amp;websiteName=qzone.qq.com&amp;Menu=yes&amp;fuin=QQ号</p>
]]></content>
      <categories>
        <category>api</category>
      </categories>
      <tags>
        <tag>api</tag>
      </tags>
  </entry>
</search>
